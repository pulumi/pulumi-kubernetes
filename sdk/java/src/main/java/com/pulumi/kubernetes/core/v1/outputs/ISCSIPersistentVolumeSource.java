// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.SecretReference;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ISCSIPersistentVolumeSource {
    /**
     * @return chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
     * 
     */
    private @Nullable Boolean chapAuthDiscovery;
    /**
     * @return chapAuthSession defines whether support iSCSI Session CHAP authentication
     * 
     */
    private @Nullable Boolean chapAuthSession;
    /**
     * @return fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     * 
     */
    private @Nullable String fsType;
    /**
     * @return initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection.
     * 
     */
    private @Nullable String initiatorName;
    /**
     * @return iqn is Target iSCSI Qualified Name.
     * 
     */
    private String iqn;
    /**
     * @return iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to &#39;default&#39; (tcp).
     * 
     */
    private @Nullable String iscsiInterface;
    /**
     * @return lun is iSCSI Target Lun number.
     * 
     */
    private Integer lun;
    /**
     * @return portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * 
     */
    private @Nullable List<String> portals;
    /**
     * @return readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     * 
     */
    private @Nullable Boolean readOnly;
    /**
     * @return secretRef is the CHAP Secret for iSCSI target and initiator authentication
     * 
     */
    private @Nullable SecretReference secretRef;
    /**
     * @return targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * 
     */
    private String targetPortal;

    private ISCSIPersistentVolumeSource() {}
    /**
     * @return chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
     * 
     */
    public Optional<Boolean> chapAuthDiscovery() {
        return Optional.ofNullable(this.chapAuthDiscovery);
    }
    /**
     * @return chapAuthSession defines whether support iSCSI Session CHAP authentication
     * 
     */
    public Optional<Boolean> chapAuthSession() {
        return Optional.ofNullable(this.chapAuthSession);
    }
    /**
     * @return fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     * 
     */
    public Optional<String> fsType() {
        return Optional.ofNullable(this.fsType);
    }
    /**
     * @return initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be created for the connection.
     * 
     */
    public Optional<String> initiatorName() {
        return Optional.ofNullable(this.initiatorName);
    }
    /**
     * @return iqn is Target iSCSI Qualified Name.
     * 
     */
    public String iqn() {
        return this.iqn;
    }
    /**
     * @return iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to &#39;default&#39; (tcp).
     * 
     */
    public Optional<String> iscsiInterface() {
        return Optional.ofNullable(this.iscsiInterface);
    }
    /**
     * @return lun is iSCSI Target Lun number.
     * 
     */
    public Integer lun() {
        return this.lun;
    }
    /**
     * @return portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * 
     */
    public List<String> portals() {
        return this.portals == null ? List.of() : this.portals;
    }
    /**
     * @return readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    /**
     * @return secretRef is the CHAP Secret for iSCSI target and initiator authentication
     * 
     */
    public Optional<SecretReference> secretRef() {
        return Optional.ofNullable(this.secretRef);
    }
    /**
     * @return targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * 
     */
    public String targetPortal() {
        return this.targetPortal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ISCSIPersistentVolumeSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean chapAuthDiscovery;
        private @Nullable Boolean chapAuthSession;
        private @Nullable String fsType;
        private @Nullable String initiatorName;
        private String iqn;
        private @Nullable String iscsiInterface;
        private Integer lun;
        private @Nullable List<String> portals;
        private @Nullable Boolean readOnly;
        private @Nullable SecretReference secretRef;
        private String targetPortal;
        public Builder() {}
        public Builder(ISCSIPersistentVolumeSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chapAuthDiscovery = defaults.chapAuthDiscovery;
    	      this.chapAuthSession = defaults.chapAuthSession;
    	      this.fsType = defaults.fsType;
    	      this.initiatorName = defaults.initiatorName;
    	      this.iqn = defaults.iqn;
    	      this.iscsiInterface = defaults.iscsiInterface;
    	      this.lun = defaults.lun;
    	      this.portals = defaults.portals;
    	      this.readOnly = defaults.readOnly;
    	      this.secretRef = defaults.secretRef;
    	      this.targetPortal = defaults.targetPortal;
        }

        @CustomType.Setter
        public Builder chapAuthDiscovery(@Nullable Boolean chapAuthDiscovery) {
            this.chapAuthDiscovery = chapAuthDiscovery;
            return this;
        }
        @CustomType.Setter
        public Builder chapAuthSession(@Nullable Boolean chapAuthSession) {
            this.chapAuthSession = chapAuthSession;
            return this;
        }
        @CustomType.Setter
        public Builder fsType(@Nullable String fsType) {
            this.fsType = fsType;
            return this;
        }
        @CustomType.Setter
        public Builder initiatorName(@Nullable String initiatorName) {
            this.initiatorName = initiatorName;
            return this;
        }
        @CustomType.Setter
        public Builder iqn(String iqn) {
            this.iqn = Objects.requireNonNull(iqn);
            return this;
        }
        @CustomType.Setter
        public Builder iscsiInterface(@Nullable String iscsiInterface) {
            this.iscsiInterface = iscsiInterface;
            return this;
        }
        @CustomType.Setter
        public Builder lun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        @CustomType.Setter
        public Builder portals(@Nullable List<String> portals) {
            this.portals = portals;
            return this;
        }
        public Builder portals(String... portals) {
            return portals(List.of(portals));
        }
        @CustomType.Setter
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder secretRef(@Nullable SecretReference secretRef) {
            this.secretRef = secretRef;
            return this;
        }
        @CustomType.Setter
        public Builder targetPortal(String targetPortal) {
            this.targetPortal = Objects.requireNonNull(targetPortal);
            return this;
        }
        public ISCSIPersistentVolumeSource build() {
            final var o = new ISCSIPersistentVolumeSource();
            o.chapAuthDiscovery = chapAuthDiscovery;
            o.chapAuthSession = chapAuthSession;
            o.fsType = fsType;
            o.initiatorName = initiatorName;
            o.iqn = iqn;
            o.iscsiInterface = iscsiInterface;
            o.lun = lun;
            o.portals = portals;
            o.readOnly = readOnly;
            o.secretRef = secretRef;
            o.targetPortal = targetPortal;
            return o;
        }
    }
}
