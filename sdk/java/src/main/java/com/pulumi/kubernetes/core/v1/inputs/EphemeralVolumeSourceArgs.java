// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.PersistentVolumeClaimTemplateArgs;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents an ephemeral volume that is handled by a normal storage driver.
 * 
 */
public final class EphemeralVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final EphemeralVolumeSourceArgs Empty = new EphemeralVolumeSourceArgs();

    /**
     * Specifies a read-only configuration for the volume. Defaults to false (read/write).
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return Specifies a read-only configuration for the volume. Defaults to false (read/write).
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `&lt;pod name&gt;-&lt;volume name&gt;` where `&lt;volume name&gt;` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
     * 
     * An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
     * 
     * This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
     * 
     * Required, must not be nil.
     * 
     */
    @Import(name="volumeClaimTemplate")
    private @Nullable Output<PersistentVolumeClaimTemplateArgs> volumeClaimTemplate;

    /**
     * @return Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `&lt;pod name&gt;-&lt;volume name&gt;` where `&lt;volume name&gt;` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
     * 
     * An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
     * 
     * This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
     * 
     * Required, must not be nil.
     * 
     */
    public Optional<Output<PersistentVolumeClaimTemplateArgs>> volumeClaimTemplate() {
        return Optional.ofNullable(this.volumeClaimTemplate);
    }

    private EphemeralVolumeSourceArgs() {}

    private EphemeralVolumeSourceArgs(EphemeralVolumeSourceArgs $) {
        this.readOnly = $.readOnly;
        this.volumeClaimTemplate = $.volumeClaimTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EphemeralVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EphemeralVolumeSourceArgs $;

        public Builder() {
            $ = new EphemeralVolumeSourceArgs();
        }

        public Builder(EphemeralVolumeSourceArgs defaults) {
            $ = new EphemeralVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param readOnly Specifies a read-only configuration for the volume. Defaults to false (read/write).
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly Specifies a read-only configuration for the volume. Defaults to false (read/write).
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param volumeClaimTemplate Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `&lt;pod name&gt;-&lt;volume name&gt;` where `&lt;volume name&gt;` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         * 
         * An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         * 
         * This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         * 
         * Required, must not be nil.
         * 
         * @return builder
         * 
         */
        public Builder volumeClaimTemplate(@Nullable Output<PersistentVolumeClaimTemplateArgs> volumeClaimTemplate) {
            $.volumeClaimTemplate = volumeClaimTemplate;
            return this;
        }

        /**
         * @param volumeClaimTemplate Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `&lt;pod name&gt;-&lt;volume name&gt;` where `&lt;volume name&gt;` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
         * 
         * An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
         * 
         * This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
         * 
         * Required, must not be nil.
         * 
         * @return builder
         * 
         */
        public Builder volumeClaimTemplate(PersistentVolumeClaimTemplateArgs volumeClaimTemplate) {
            return volumeClaimTemplate(Output.of(volumeClaimTemplate));
        }

        public EphemeralVolumeSourceArgs build() {
            return $;
        }
    }

}
