// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceSelector;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeviceTaintSelector {
    /**
     * @return If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
     * 
     * Setting also driver and pool may be required to avoid ambiguity, but is not required.
     * 
     */
    private @Nullable String device;
    /**
     * @return If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
     * 
     */
    private @Nullable String deviceClassName;
    /**
     * @return If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
     * 
     */
    private @Nullable String driver;
    /**
     * @return If pool is set, only devices in that pool are selected.
     * 
     * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
     * 
     */
    private @Nullable String pool;
    /**
     * @return Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
     * 
     */
    private @Nullable List<DeviceSelector> selectors;

    private DeviceTaintSelector() {}
    /**
     * @return If device is set, only devices with that name are selected. This field corresponds to slice.spec.devices[].name.
     * 
     * Setting also driver and pool may be required to avoid ambiguity, but is not required.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return If DeviceClassName is set, the selectors defined there must be satisfied by a device to be selected. This field corresponds to class.metadata.name.
     * 
     */
    public Optional<String> deviceClassName() {
        return Optional.ofNullable(this.deviceClassName);
    }
    /**
     * @return If driver is set, only devices from that driver are selected. This fields corresponds to slice.spec.driver.
     * 
     */
    public Optional<String> driver() {
        return Optional.ofNullable(this.driver);
    }
    /**
     * @return If pool is set, only devices in that pool are selected.
     * 
     * Also setting the driver name may be useful to avoid ambiguity when different drivers use the same pool name, but this is not required because selecting pools from different drivers may also be useful, for example when drivers with node-local devices use the node name as their pool name.
     * 
     */
    public Optional<String> pool() {
        return Optional.ofNullable(this.pool);
    }
    /**
     * @return Selectors contains the same selection criteria as a ResourceClaim. Currently, CEL expressions are supported. All of these selectors must be satisfied.
     * 
     */
    public List<DeviceSelector> selectors() {
        return this.selectors == null ? List.of() : this.selectors;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceTaintSelector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String device;
        private @Nullable String deviceClassName;
        private @Nullable String driver;
        private @Nullable String pool;
        private @Nullable List<DeviceSelector> selectors;
        public Builder() {}
        public Builder(DeviceTaintSelector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.deviceClassName = defaults.deviceClassName;
    	      this.driver = defaults.driver;
    	      this.pool = defaults.pool;
    	      this.selectors = defaults.selectors;
        }

        @CustomType.Setter
        public Builder device(@Nullable String device) {

            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder deviceClassName(@Nullable String deviceClassName) {

            this.deviceClassName = deviceClassName;
            return this;
        }
        @CustomType.Setter
        public Builder driver(@Nullable String driver) {

            this.driver = driver;
            return this;
        }
        @CustomType.Setter
        public Builder pool(@Nullable String pool) {

            this.pool = pool;
            return this;
        }
        @CustomType.Setter
        public Builder selectors(@Nullable List<DeviceSelector> selectors) {

            this.selectors = selectors;
            return this;
        }
        public Builder selectors(DeviceSelector... selectors) {
            return selectors(List.of(selectors));
        }
        public DeviceTaintSelector build() {
            final var _resultValue = new DeviceTaintSelector();
            _resultValue.device = device;
            _resultValue.deviceClassName = deviceClassName;
            _resultValue.driver = driver;
            _resultValue.pool = pool;
            _resultValue.selectors = selectors;
            return _resultValue;
        }
    }
}
