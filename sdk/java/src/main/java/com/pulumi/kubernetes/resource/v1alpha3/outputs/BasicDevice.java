// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.NodeSelector;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceAttribute;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceCounterConsumption;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.DeviceTaint;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BasicDevice {
    /**
     * @return AllNodes indicates that all nodes have access to the device.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    private @Nullable Boolean allNodes;
    /**
     * @return Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    private @Nullable Map<String,DeviceAttribute> attributes;
    /**
     * @return Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    private @Nullable Map<String,String> capacity;
    /**
     * @return ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
     * 
     * There can only be a single entry per counterSet.
     * 
     * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    private @Nullable List<DeviceCounterConsumption> consumesCounters;
    /**
     * @return NodeName identifies the node where the device is available.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    private @Nullable String nodeName;
    /**
     * @return NodeSelector defines the nodes where the device is available.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    private @Nullable NodeSelector nodeSelector;
    /**
     * @return If specified, these are the driver-defined taints.
     * 
     * The maximum number of taints is 4.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    private @Nullable List<DeviceTaint> taints;

    private BasicDevice() {}
    /**
     * @return AllNodes indicates that all nodes have access to the device.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    public Optional<Boolean> allNodes() {
        return Optional.ofNullable(this.allNodes);
    }
    /**
     * @return Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    public Map<String,DeviceAttribute> attributes() {
        return this.attributes == null ? Map.of() : this.attributes;
    }
    /**
     * @return Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.
     * 
     * The maximum number of attributes and capacities combined is 32.
     * 
     */
    public Map<String,String> capacity() {
        return this.capacity == null ? Map.of() : this.capacity;
    }
    /**
     * @return ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.
     * 
     * There can only be a single entry per counterSet.
     * 
     * The total number of device counter consumption entries must be &lt;= 32. In addition, the total number in the entire ResourceSlice must be &lt;= 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    public List<DeviceCounterConsumption> consumesCounters() {
        return this.consumesCounters == null ? List.of() : this.consumesCounters;
    }
    /**
     * @return NodeName identifies the node where the device is available.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    public Optional<String> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }
    /**
     * @return NodeSelector defines the nodes where the device is available.
     * 
     * Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.
     * 
     */
    public Optional<NodeSelector> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }
    /**
     * @return If specified, these are the driver-defined taints.
     * 
     * The maximum number of taints is 4.
     * 
     * This is an alpha field and requires enabling the DRADeviceTaints feature gate.
     * 
     */
    public List<DeviceTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BasicDevice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allNodes;
        private @Nullable Map<String,DeviceAttribute> attributes;
        private @Nullable Map<String,String> capacity;
        private @Nullable List<DeviceCounterConsumption> consumesCounters;
        private @Nullable String nodeName;
        private @Nullable NodeSelector nodeSelector;
        private @Nullable List<DeviceTaint> taints;
        public Builder() {}
        public Builder(BasicDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allNodes = defaults.allNodes;
    	      this.attributes = defaults.attributes;
    	      this.capacity = defaults.capacity;
    	      this.consumesCounters = defaults.consumesCounters;
    	      this.nodeName = defaults.nodeName;
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.taints = defaults.taints;
        }

        @CustomType.Setter
        public Builder allNodes(@Nullable Boolean allNodes) {

            this.allNodes = allNodes;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(@Nullable Map<String,DeviceAttribute> attributes) {

            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder capacity(@Nullable Map<String,String> capacity) {

            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder consumesCounters(@Nullable List<DeviceCounterConsumption> consumesCounters) {

            this.consumesCounters = consumesCounters;
            return this;
        }
        public Builder consumesCounters(DeviceCounterConsumption... consumesCounters) {
            return consumesCounters(List.of(consumesCounters));
        }
        @CustomType.Setter
        public Builder nodeName(@Nullable String nodeName) {

            this.nodeName = nodeName;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSelector(@Nullable NodeSelector nodeSelector) {

            this.nodeSelector = nodeSelector;
            return this;
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<DeviceTaint> taints) {

            this.taints = taints;
            return this;
        }
        public Builder taints(DeviceTaint... taints) {
            return taints(List.of(taints));
        }
        public BasicDevice build() {
            final var _resultValue = new BasicDevice();
            _resultValue.allNodes = allNodes;
            _resultValue.attributes = attributes;
            _resultValue.capacity = capacity;
            _resultValue.consumesCounters = consumesCounters;
            _resultValue.nodeName = nodeName;
            _resultValue.nodeSelector = nodeSelector;
            _resultValue.taints = taints;
            return _resultValue;
        }
    }
}
