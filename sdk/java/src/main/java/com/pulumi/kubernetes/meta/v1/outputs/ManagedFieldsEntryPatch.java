// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.meta.v1.outputs;

import com.google.gson.JsonElement;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedFieldsEntryPatch {
    /**
     * @return APIVersion defines the version of this resource that this field set applies to. The format is &#34;group/version&#34; just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * 
     */
    private @Nullable String apiVersion;
    /**
     * @return FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: &#34;FieldsV1&#34;
     * 
     */
    private @Nullable String fieldsType;
    /**
     * @return FieldsV1 holds the first JSON version format as described in the &#34;FieldsV1&#34; type.
     * 
     */
    private @Nullable JsonElement fieldsV1;
    /**
     * @return Manager is an identifier of the workflow managing these fields.
     * 
     */
    private @Nullable String manager;
    /**
     * @return Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are &#39;Apply&#39; and &#39;Update&#39;.
     * 
     */
    private @Nullable String operation;
    /**
     * @return Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
     * 
     */
    private @Nullable String subresource;
    /**
     * @return Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
     * 
     */
    private @Nullable String time;

    private ManagedFieldsEntryPatch() {}
    /**
     * @return APIVersion defines the version of this resource that this field set applies to. The format is &#34;group/version&#34; just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * 
     */
    public Optional<String> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }
    /**
     * @return FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: &#34;FieldsV1&#34;
     * 
     */
    public Optional<String> fieldsType() {
        return Optional.ofNullable(this.fieldsType);
    }
    /**
     * @return FieldsV1 holds the first JSON version format as described in the &#34;FieldsV1&#34; type.
     * 
     */
    public Optional<JsonElement> fieldsV1() {
        return Optional.ofNullable(this.fieldsV1);
    }
    /**
     * @return Manager is an identifier of the workflow managing these fields.
     * 
     */
    public Optional<String> manager() {
        return Optional.ofNullable(this.manager);
    }
    /**
     * @return Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are &#39;Apply&#39; and &#39;Update&#39;.
     * 
     */
    public Optional<String> operation() {
        return Optional.ofNullable(this.operation);
    }
    /**
     * @return Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
     * 
     */
    public Optional<String> subresource() {
        return Optional.ofNullable(this.subresource);
    }
    /**
     * @return Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
     * 
     */
    public Optional<String> time() {
        return Optional.ofNullable(this.time);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedFieldsEntryPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String apiVersion;
        private @Nullable String fieldsType;
        private @Nullable JsonElement fieldsV1;
        private @Nullable String manager;
        private @Nullable String operation;
        private @Nullable String subresource;
        private @Nullable String time;
        public Builder() {}
        public Builder(ManagedFieldsEntryPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.fieldsType = defaults.fieldsType;
    	      this.fieldsV1 = defaults.fieldsV1;
    	      this.manager = defaults.manager;
    	      this.operation = defaults.operation;
    	      this.subresource = defaults.subresource;
    	      this.time = defaults.time;
        }

        @CustomType.Setter
        public Builder apiVersion(@Nullable String apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }
        @CustomType.Setter
        public Builder fieldsType(@Nullable String fieldsType) {
            this.fieldsType = fieldsType;
            return this;
        }
        @CustomType.Setter
        public Builder fieldsV1(@Nullable JsonElement fieldsV1) {
            this.fieldsV1 = fieldsV1;
            return this;
        }
        @CustomType.Setter
        public Builder manager(@Nullable String manager) {
            this.manager = manager;
            return this;
        }
        @CustomType.Setter
        public Builder operation(@Nullable String operation) {
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder subresource(@Nullable String subresource) {
            this.subresource = subresource;
            return this;
        }
        @CustomType.Setter
        public Builder time(@Nullable String time) {
            this.time = time;
            return this;
        }
        public ManagedFieldsEntryPatch build() {
            final var o = new ManagedFieldsEntryPatch();
            o.apiVersion = apiVersion;
            o.fieldsType = fieldsType;
            o.fieldsV1 = fieldsV1;
            o.manager = manager;
            o.operation = operation;
            o.subresource = subresource;
            o.time = time;
            return o;
        }
    }
}
