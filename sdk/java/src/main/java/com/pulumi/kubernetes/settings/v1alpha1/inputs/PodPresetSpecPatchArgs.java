// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.settings.v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.EnvFromSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.EnvVarPatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.VolumeMountPatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.VolumePatchArgs;
import com.pulumi.kubernetes.meta.v1.inputs.LabelSelectorPatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PodPresetSpec is a description of a pod preset.
 * 
 */
public final class PodPresetSpecPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodPresetSpecPatchArgs Empty = new PodPresetSpecPatchArgs();

    /**
     * Env defines the collection of EnvVar to inject into containers.
     * 
     */
    @Import(name="env")
    private @Nullable Output<List<EnvVarPatchArgs>> env;

    /**
     * @return Env defines the collection of EnvVar to inject into containers.
     * 
     */
    public Optional<Output<List<EnvVarPatchArgs>>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * EnvFrom defines the collection of EnvFromSource to inject into containers.
     * 
     */
    @Import(name="envFrom")
    private @Nullable Output<List<EnvFromSourcePatchArgs>> envFrom;

    /**
     * @return EnvFrom defines the collection of EnvFromSource to inject into containers.
     * 
     */
    public Optional<Output<List<EnvFromSourcePatchArgs>>> envFrom() {
        return Optional.ofNullable(this.envFrom);
    }

    /**
     * Selector is a label query over a set of resources, in this case pods. Required.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<LabelSelectorPatchArgs> selector;

    /**
     * @return Selector is a label query over a set of resources, in this case pods. Required.
     * 
     */
    public Optional<Output<LabelSelectorPatchArgs>> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * VolumeMounts defines the collection of VolumeMount to inject into containers.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable Output<List<VolumeMountPatchArgs>> volumeMounts;

    /**
     * @return VolumeMounts defines the collection of VolumeMount to inject into containers.
     * 
     */
    public Optional<Output<List<VolumeMountPatchArgs>>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    /**
     * Volumes defines the collection of Volume to inject into the pod.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<VolumePatchArgs>> volumes;

    /**
     * @return Volumes defines the collection of Volume to inject into the pod.
     * 
     */
    public Optional<Output<List<VolumePatchArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private PodPresetSpecPatchArgs() {}

    private PodPresetSpecPatchArgs(PodPresetSpecPatchArgs $) {
        this.env = $.env;
        this.envFrom = $.envFrom;
        this.selector = $.selector;
        this.volumeMounts = $.volumeMounts;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PodPresetSpecPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PodPresetSpecPatchArgs $;

        public Builder() {
            $ = new PodPresetSpecPatchArgs();
        }

        public Builder(PodPresetSpecPatchArgs defaults) {
            $ = new PodPresetSpecPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param env Env defines the collection of EnvVar to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable Output<List<EnvVarPatchArgs>> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Env defines the collection of EnvVar to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder env(List<EnvVarPatchArgs> env) {
            return env(Output.of(env));
        }

        /**
         * @param env Env defines the collection of EnvVar to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder env(EnvVarPatchArgs... env) {
            return env(List.of(env));
        }

        /**
         * @param envFrom EnvFrom defines the collection of EnvFromSource to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder envFrom(@Nullable Output<List<EnvFromSourcePatchArgs>> envFrom) {
            $.envFrom = envFrom;
            return this;
        }

        /**
         * @param envFrom EnvFrom defines the collection of EnvFromSource to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder envFrom(List<EnvFromSourcePatchArgs> envFrom) {
            return envFrom(Output.of(envFrom));
        }

        /**
         * @param envFrom EnvFrom defines the collection of EnvFromSource to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder envFrom(EnvFromSourcePatchArgs... envFrom) {
            return envFrom(List.of(envFrom));
        }

        /**
         * @param selector Selector is a label query over a set of resources, in this case pods. Required.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<LabelSelectorPatchArgs> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector Selector is a label query over a set of resources, in this case pods. Required.
         * 
         * @return builder
         * 
         */
        public Builder selector(LabelSelectorPatchArgs selector) {
            return selector(Output.of(selector));
        }

        /**
         * @param volumeMounts VolumeMounts defines the collection of VolumeMount to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable Output<List<VolumeMountPatchArgs>> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts VolumeMounts defines the collection of VolumeMount to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(List<VolumeMountPatchArgs> volumeMounts) {
            return volumeMounts(Output.of(volumeMounts));
        }

        /**
         * @param volumeMounts VolumeMounts defines the collection of VolumeMount to inject into containers.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(VolumeMountPatchArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        /**
         * @param volumes Volumes defines the collection of Volume to inject into the pod.
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<VolumePatchArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes Volumes defines the collection of Volume to inject into the pod.
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<VolumePatchArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes Volumes defines the collection of Volume to inject into the pod.
         * 
         * @return builder
         * 
         */
        public Builder volumes(VolumePatchArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public PodPresetSpecPatchArgs build() {
            return $;
        }
    }

}
