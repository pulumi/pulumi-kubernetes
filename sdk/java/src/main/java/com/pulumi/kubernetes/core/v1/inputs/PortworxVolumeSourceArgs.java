// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PortworxVolumeSource represents a Portworx volume resource.
 * 
 */
public final class PortworxVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortworxVolumeSourceArgs Empty = new PortworxVolumeSourceArgs();

    /**
     * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
     * 
     */
    @Import(name="fsType")
    private @Nullable Output<String> fsType;

    /**
     * @return fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
     * 
     */
    public Optional<Output<String>> fsType() {
        return Optional.ofNullable(this.fsType);
    }

    /**
     * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * volumeID uniquely identifies a Portworx volume
     * 
     */
    @Import(name="volumeID", required=true)
    private Output<String> volumeID;

    /**
     * @return volumeID uniquely identifies a Portworx volume
     * 
     */
    public Output<String> volumeID() {
        return this.volumeID;
    }

    private PortworxVolumeSourceArgs() {}

    private PortworxVolumeSourceArgs(PortworxVolumeSourceArgs $) {
        this.fsType = $.fsType;
        this.readOnly = $.readOnly;
        this.volumeID = $.volumeID;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PortworxVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PortworxVolumeSourceArgs $;

        public Builder() {
            $ = new PortworxVolumeSourceArgs();
        }

        public Builder(PortworxVolumeSourceArgs defaults) {
            $ = new PortworxVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fsType fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder fsType(@Nullable Output<String> fsType) {
            $.fsType = fsType;
            return this;
        }

        /**
         * @param fsType fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
         * 
         * @return builder
         * 
         */
        public Builder fsType(String fsType) {
            return fsType(Output.of(fsType));
        }

        /**
         * @param readOnly readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param volumeID volumeID uniquely identifies a Portworx volume
         * 
         * @return builder
         * 
         */
        public Builder volumeID(Output<String> volumeID) {
            $.volumeID = volumeID;
            return this;
        }

        /**
         * @param volumeID volumeID uniquely identifies a Portworx volume
         * 
         * @return builder
         * 
         */
        public Builder volumeID(String volumeID) {
            return volumeID(Output.of(volumeID));
        }

        public PortworxVolumeSourceArgs build() {
            $.volumeID = Objects.requireNonNull($.volumeID, "expected parameter 'volumeID' to be non-null");
            return $;
        }
    }

}
