// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.core.v1.inputs.ResourceHealthArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ResourceStatus represents the status of a single resource allocated to a Pod.
 * 
 */
public final class ResourceStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceStatusArgs Empty = new ResourceStatusArgs();

    /**
     * Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be &#34;claim:&lt;claim_name&gt;/&lt;request&gt;&#34;. When this status is reported about a container, the &#34;claim_name&#34; and &#34;request&#34; must match one of the claims of this container.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be &#34;claim:&lt;claim_name&gt;/&lt;request&gt;&#34;. When this status is reported about a container, the &#34;claim_name&#34; and &#34;request&#34; must match one of the claims of this container.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
     * 
     */
    @Import(name="resources")
    private @Nullable Output<List<ResourceHealthArgs>> resources;

    /**
     * @return List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
     * 
     */
    public Optional<Output<List<ResourceHealthArgs>>> resources() {
        return Optional.ofNullable(this.resources);
    }

    private ResourceStatusArgs() {}

    private ResourceStatusArgs(ResourceStatusArgs $) {
        this.name = $.name;
        this.resources = $.resources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceStatusArgs $;

        public Builder() {
            $ = new ResourceStatusArgs();
        }

        public Builder(ResourceStatusArgs defaults) {
            $ = new ResourceStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be &#34;claim:&lt;claim_name&gt;/&lt;request&gt;&#34;. When this status is reported about a container, the &#34;claim_name&#34; and &#34;request&#34; must match one of the claims of this container.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be &#34;claim:&lt;claim_name&gt;/&lt;request&gt;&#34;. When this status is reported about a container, the &#34;claim_name&#34; and &#34;request&#34; must match one of the claims of this container.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resources List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable Output<List<ResourceHealthArgs>> resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param resources List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
         * 
         * @return builder
         * 
         */
        public Builder resources(List<ResourceHealthArgs> resources) {
            return resources(Output.of(resources));
        }

        /**
         * @param resources List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.
         * 
         * @return builder
         * 
         */
        public Builder resources(ResourceHealthArgs... resources) {
            return resources(List.of(resources));
        }

        public ResourceStatusArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ResourceStatusArgs", "name");
            }
            return $;
        }
    }

}
