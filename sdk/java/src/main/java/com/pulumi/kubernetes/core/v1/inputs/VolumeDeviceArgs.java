// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * volumeDevice describes a mapping of a raw block device within a container.
 * 
 */
public final class VolumeDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeDeviceArgs Empty = new VolumeDeviceArgs();

    /**
     * devicePath is the path inside of the container that the device will be mapped to.
     * 
     */
    @Import(name="devicePath", required=true)
    private Output<String> devicePath;

    /**
     * @return devicePath is the path inside of the container that the device will be mapped to.
     * 
     */
    public Output<String> devicePath() {
        return this.devicePath;
    }

    /**
     * name must match the name of a persistentVolumeClaim in the pod
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return name must match the name of a persistentVolumeClaim in the pod
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private VolumeDeviceArgs() {}

    private VolumeDeviceArgs(VolumeDeviceArgs $) {
        this.devicePath = $.devicePath;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeDeviceArgs $;

        public Builder() {
            $ = new VolumeDeviceArgs();
        }

        public Builder(VolumeDeviceArgs defaults) {
            $ = new VolumeDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param devicePath devicePath is the path inside of the container that the device will be mapped to.
         * 
         * @return builder
         * 
         */
        public Builder devicePath(Output<String> devicePath) {
            $.devicePath = devicePath;
            return this;
        }

        /**
         * @param devicePath devicePath is the path inside of the container that the device will be mapped to.
         * 
         * @return builder
         * 
         */
        public Builder devicePath(String devicePath) {
            return devicePath(Output.of(devicePath));
        }

        /**
         * @param name name must match the name of a persistentVolumeClaim in the pod
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name name must match the name of a persistentVolumeClaim in the pod
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public VolumeDeviceArgs build() {
            $.devicePath = Objects.requireNonNull($.devicePath, "expected parameter 'devicePath' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
