// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeMountPatch {
    /**
     * @return Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.
     * 
     */
    private @Nullable String mountPath;
    /**
     * @return mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
     * 
     */
    private @Nullable String mountPropagation;
    /**
     * @return This must match the Name of a Volume.
     * 
     */
    private @Nullable String name;
    /**
     * @return Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     * 
     */
    private @Nullable Boolean readOnly;
    /**
     * @return RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
     * 
     * If ReadOnly is false, this field has no meaning and must be unspecified.
     * 
     * If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
     * 
     * If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
     * 
     * If this field is not specified, it is treated as an equivalent of Disabled.
     * 
     */
    private @Nullable String recursiveReadOnly;
    /**
     * @return Path within the volume from which the container&#39;s volume should be mounted. Defaults to &#34;&#34; (volume&#39;s root).
     * 
     */
    private @Nullable String subPath;
    /**
     * @return Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container&#39;s environment. Defaults to &#34;&#34; (volume&#39;s root). SubPathExpr and SubPath are mutually exclusive.
     * 
     */
    private @Nullable String subPathExpr;

    private VolumeMountPatch() {}
    /**
     * @return Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.
     * 
     */
    public Optional<String> mountPath() {
        return Optional.ofNullable(this.mountPath);
    }
    /**
     * @return mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
     * 
     */
    public Optional<String> mountPropagation() {
        return Optional.ofNullable(this.mountPropagation);
    }
    /**
     * @return This must match the Name of a Volume.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    /**
     * @return RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
     * 
     * If ReadOnly is false, this field has no meaning and must be unspecified.
     * 
     * If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
     * 
     * If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
     * 
     * If this field is not specified, it is treated as an equivalent of Disabled.
     * 
     */
    public Optional<String> recursiveReadOnly() {
        return Optional.ofNullable(this.recursiveReadOnly);
    }
    /**
     * @return Path within the volume from which the container&#39;s volume should be mounted. Defaults to &#34;&#34; (volume&#39;s root).
     * 
     */
    public Optional<String> subPath() {
        return Optional.ofNullable(this.subPath);
    }
    /**
     * @return Expanded path within the volume from which the container&#39;s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container&#39;s environment. Defaults to &#34;&#34; (volume&#39;s root). SubPathExpr and SubPath are mutually exclusive.
     * 
     */
    public Optional<String> subPathExpr() {
        return Optional.ofNullable(this.subPathExpr);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeMountPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String mountPath;
        private @Nullable String mountPropagation;
        private @Nullable String name;
        private @Nullable Boolean readOnly;
        private @Nullable String recursiveReadOnly;
        private @Nullable String subPath;
        private @Nullable String subPathExpr;
        public Builder() {}
        public Builder(VolumeMountPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountPath = defaults.mountPath;
    	      this.mountPropagation = defaults.mountPropagation;
    	      this.name = defaults.name;
    	      this.readOnly = defaults.readOnly;
    	      this.recursiveReadOnly = defaults.recursiveReadOnly;
    	      this.subPath = defaults.subPath;
    	      this.subPathExpr = defaults.subPathExpr;
        }

        @CustomType.Setter
        public Builder mountPath(@Nullable String mountPath) {
            this.mountPath = mountPath;
            return this;
        }
        @CustomType.Setter
        public Builder mountPropagation(@Nullable String mountPropagation) {
            this.mountPropagation = mountPropagation;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder recursiveReadOnly(@Nullable String recursiveReadOnly) {
            this.recursiveReadOnly = recursiveReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder subPath(@Nullable String subPath) {
            this.subPath = subPath;
            return this;
        }
        @CustomType.Setter
        public Builder subPathExpr(@Nullable String subPathExpr) {
            this.subPathExpr = subPathExpr;
            return this;
        }
        public VolumeMountPatch build() {
            final var o = new VolumeMountPatch();
            o.mountPath = mountPath;
            o.mountPropagation = mountPropagation;
            o.name = name;
            o.readOnly = readOnly;
            o.recursiveReadOnly = recursiveReadOnly;
            o.subPath = subPath;
            o.subPathExpr = subPathExpr;
            return o;
        }
    }
}
