// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.discovery.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EndpointConditionsPatch {
    /**
     * @return ready indicates that this endpoint is ready to receive traffic, according to whatever system is managing the endpoint. A nil value should be interpreted as &#34;true&#34;. In general, an endpoint should be marked ready if it is serving and not terminating, though this can be overridden in some cases, such as when the associated Service has set the publishNotReadyAddresses flag.
     * 
     */
    private @Nullable Boolean ready;
    /**
     * @return serving indicates that this endpoint is able to receive traffic, according to whatever system is managing the endpoint. For endpoints backed by pods, the EndpointSlice controller will mark the endpoint as serving if the pod&#39;s Ready condition is True. A nil value should be interpreted as &#34;true&#34;.
     * 
     */
    private @Nullable Boolean serving;
    /**
     * @return terminating indicates that this endpoint is terminating. A nil value should be interpreted as &#34;false&#34;.
     * 
     */
    private @Nullable Boolean terminating;

    private EndpointConditionsPatch() {}
    /**
     * @return ready indicates that this endpoint is ready to receive traffic, according to whatever system is managing the endpoint. A nil value should be interpreted as &#34;true&#34;. In general, an endpoint should be marked ready if it is serving and not terminating, though this can be overridden in some cases, such as when the associated Service has set the publishNotReadyAddresses flag.
     * 
     */
    public Optional<Boolean> ready() {
        return Optional.ofNullable(this.ready);
    }
    /**
     * @return serving indicates that this endpoint is able to receive traffic, according to whatever system is managing the endpoint. For endpoints backed by pods, the EndpointSlice controller will mark the endpoint as serving if the pod&#39;s Ready condition is True. A nil value should be interpreted as &#34;true&#34;.
     * 
     */
    public Optional<Boolean> serving() {
        return Optional.ofNullable(this.serving);
    }
    /**
     * @return terminating indicates that this endpoint is terminating. A nil value should be interpreted as &#34;false&#34;.
     * 
     */
    public Optional<Boolean> terminating() {
        return Optional.ofNullable(this.terminating);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointConditionsPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean ready;
        private @Nullable Boolean serving;
        private @Nullable Boolean terminating;
        public Builder() {}
        public Builder(EndpointConditionsPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ready = defaults.ready;
    	      this.serving = defaults.serving;
    	      this.terminating = defaults.terminating;
        }

        @CustomType.Setter
        public Builder ready(@Nullable Boolean ready) {

            this.ready = ready;
            return this;
        }
        @CustomType.Setter
        public Builder serving(@Nullable Boolean serving) {

            this.serving = serving;
            return this;
        }
        @CustomType.Setter
        public Builder terminating(@Nullable Boolean terminating) {

            this.terminating = terminating;
            return this;
        }
        public EndpointConditionsPatch build() {
            final var _resultValue = new EndpointConditionsPatch();
            _resultValue.ready = ready;
            _resultValue.serving = serving;
            _resultValue.terminating = terminating;
            return _resultValue;
        }
    }
}
