// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.node.v1alpha1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.node.v1alpha1.outputs.OverheadPatch;
import com.pulumi.kubernetes.node.v1alpha1.outputs.SchedulingPatch;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RuntimeClassSpecPatch {
    /**
     * @return Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
     * 
     */
    private @Nullable OverheadPatch overhead;
    /**
     * @return RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node &amp; CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called &#34;runc&#34; might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
     * 
     */
    private @Nullable String runtimeHandler;
    /**
     * @return Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
     * 
     */
    private @Nullable SchedulingPatch scheduling;

    private RuntimeClassSpecPatch() {}
    /**
     * @return Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
     * 
     */
    public Optional<OverheadPatch> overhead() {
        return Optional.ofNullable(this.overhead);
    }
    /**
     * @return RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node &amp; CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called &#34;runc&#34; might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
     * 
     */
    public Optional<String> runtimeHandler() {
        return Optional.ofNullable(this.runtimeHandler);
    }
    /**
     * @return Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
     * 
     */
    public Optional<SchedulingPatch> scheduling() {
        return Optional.ofNullable(this.scheduling);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuntimeClassSpecPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable OverheadPatch overhead;
        private @Nullable String runtimeHandler;
        private @Nullable SchedulingPatch scheduling;
        public Builder() {}
        public Builder(RuntimeClassSpecPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.overhead = defaults.overhead;
    	      this.runtimeHandler = defaults.runtimeHandler;
    	      this.scheduling = defaults.scheduling;
        }

        @CustomType.Setter
        public Builder overhead(@Nullable OverheadPatch overhead) {
            this.overhead = overhead;
            return this;
        }
        @CustomType.Setter
        public Builder runtimeHandler(@Nullable String runtimeHandler) {
            this.runtimeHandler = runtimeHandler;
            return this;
        }
        @CustomType.Setter
        public Builder scheduling(@Nullable SchedulingPatch scheduling) {
            this.scheduling = scheduling;
            return this;
        }
        public RuntimeClassSpecPatch build() {
            final var o = new RuntimeClassSpecPatch();
            o.overhead = overhead;
            o.runtimeHandler = runtimeHandler;
            o.scheduling = scheduling;
            return o;
        }
    }
}
