// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ClaimSource describes a reference to a ResourceClaim.
 * 
 * Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
 * 
 */
public final class ClaimSourcePatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClaimSourcePatchArgs Empty = new ClaimSourcePatchArgs();

    /**
     * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
     * 
     */
    @Import(name="resourceClaimName")
    private @Nullable Output<String> resourceClaimName;

    /**
     * @return ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
     * 
     */
    public Optional<Output<String>> resourceClaimName() {
        return Optional.ofNullable(this.resourceClaimName);
    }

    /**
     * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
     * 
     * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be &lt;pod name&gt;-&lt;resource name&gt;, where &lt;resource name&gt; is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
     * 
     * An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
     * 
     * This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
     * 
     */
    @Import(name="resourceClaimTemplateName")
    private @Nullable Output<String> resourceClaimTemplateName;

    /**
     * @return ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
     * 
     * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be &lt;pod name&gt;-&lt;resource name&gt;, where &lt;resource name&gt; is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
     * 
     * An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
     * 
     * This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
     * 
     */
    public Optional<Output<String>> resourceClaimTemplateName() {
        return Optional.ofNullable(this.resourceClaimTemplateName);
    }

    private ClaimSourcePatchArgs() {}

    private ClaimSourcePatchArgs(ClaimSourcePatchArgs $) {
        this.resourceClaimName = $.resourceClaimName;
        this.resourceClaimTemplateName = $.resourceClaimTemplateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClaimSourcePatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClaimSourcePatchArgs $;

        public Builder() {
            $ = new ClaimSourcePatchArgs();
        }

        public Builder(ClaimSourcePatchArgs defaults) {
            $ = new ClaimSourcePatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param resourceClaimName ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
         * 
         * @return builder
         * 
         */
        public Builder resourceClaimName(@Nullable Output<String> resourceClaimName) {
            $.resourceClaimName = resourceClaimName;
            return this;
        }

        /**
         * @param resourceClaimName ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
         * 
         * @return builder
         * 
         */
        public Builder resourceClaimName(String resourceClaimName) {
            return resourceClaimName(Output.of(resourceClaimName));
        }

        /**
         * @param resourceClaimTemplateName ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
         * 
         * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be &lt;pod name&gt;-&lt;resource name&gt;, where &lt;resource name&gt; is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
         * 
         * An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
         * 
         * This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
         * 
         * @return builder
         * 
         */
        public Builder resourceClaimTemplateName(@Nullable Output<String> resourceClaimTemplateName) {
            $.resourceClaimTemplateName = resourceClaimTemplateName;
            return this;
        }

        /**
         * @param resourceClaimTemplateName ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.
         * 
         * The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be &lt;pod name&gt;-&lt;resource name&gt;, where &lt;resource name&gt; is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long).
         * 
         * An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed.
         * 
         * This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
         * 
         * @return builder
         * 
         */
        public Builder resourceClaimTemplateName(String resourceClaimTemplateName) {
            return resourceClaimTemplateName(Output.of(resourceClaimTemplateName));
        }

        public ClaimSourcePatchArgs build() {
            return $;
        }
    }

}
