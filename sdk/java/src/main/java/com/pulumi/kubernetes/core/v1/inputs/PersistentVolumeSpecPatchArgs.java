// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.AWSElasticBlockStoreVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.AzureDiskVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.AzureFilePersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.CSIPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.CephFSPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.CinderPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.FCVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.FlexPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.FlockerVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.GCEPersistentDiskVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.GlusterfsPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.HostPathVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.ISCSIPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.LocalVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.NFSVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.ObjectReferencePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.PhotonPersistentDiskVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.PortworxVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.QuobyteVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.RBDPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.ScaleIOPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.StorageOSPersistentVolumeSourcePatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.VolumeNodeAffinityPatchArgs;
import com.pulumi.kubernetes.core.v1.inputs.VsphereVirtualDiskVolumeSourcePatchArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PersistentVolumeSpec is the specification of a persistent volume.
 * 
 */
public final class PersistentVolumeSpecPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final PersistentVolumeSpecPatchArgs Empty = new PersistentVolumeSpecPatchArgs();

    /**
     * accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     * 
     */
    @Import(name="accessModes")
    private @Nullable Output<List<String>> accessModes;

    /**
     * @return accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     * 
     */
    public Optional<Output<List<String>>> accessModes() {
        return Optional.ofNullable(this.accessModes);
    }

    /**
     * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    @Import(name="awsElasticBlockStore")
    private @Nullable Output<AWSElasticBlockStoreVolumeSourcePatchArgs> awsElasticBlockStore;

    /**
     * @return awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    public Optional<Output<AWSElasticBlockStoreVolumeSourcePatchArgs>> awsElasticBlockStore() {
        return Optional.ofNullable(this.awsElasticBlockStore);
    }

    /**
     * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureDisk")
    private @Nullable Output<AzureDiskVolumeSourcePatchArgs> azureDisk;

    /**
     * @return azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    public Optional<Output<AzureDiskVolumeSourcePatchArgs>> azureDisk() {
        return Optional.ofNullable(this.azureDisk);
    }

    /**
     * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureFile")
    private @Nullable Output<AzureFilePersistentVolumeSourcePatchArgs> azureFile;

    /**
     * @return azureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    public Optional<Output<AzureFilePersistentVolumeSourcePatchArgs>> azureFile() {
        return Optional.ofNullable(this.azureFile);
    }

    /**
     * capacity is the description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Map<String,String>> capacity;

    /**
     * @return capacity is the description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     * 
     */
    public Optional<Output<Map<String,String>>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="cephfs")
    private @Nullable Output<CephFSPersistentVolumeSourcePatchArgs> cephfs;

    /**
     * @return cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    public Optional<Output<CephFSPersistentVolumeSourcePatchArgs>> cephfs() {
        return Optional.ofNullable(this.cephfs);
    }

    /**
     * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    @Import(name="cinder")
    private @Nullable Output<CinderPersistentVolumeSourcePatchArgs> cinder;

    /**
     * @return cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    public Optional<Output<CinderPersistentVolumeSourcePatchArgs>> cinder() {
        return Optional.ofNullable(this.cinder);
    }

    /**
     * claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
     * 
     */
    @Import(name="claimRef")
    private @Nullable Output<ObjectReferencePatchArgs> claimRef;

    /**
     * @return claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
     * 
     */
    public Optional<Output<ObjectReferencePatchArgs>> claimRef() {
        return Optional.ofNullable(this.claimRef);
    }

    /**
     * csi represents storage that is handled by an external CSI driver (Beta feature).
     * 
     */
    @Import(name="csi")
    private @Nullable Output<CSIPersistentVolumeSourcePatchArgs> csi;

    /**
     * @return csi represents storage that is handled by an external CSI driver (Beta feature).
     * 
     */
    public Optional<Output<CSIPersistentVolumeSourcePatchArgs>> csi() {
        return Optional.ofNullable(this.csi);
    }

    /**
     * fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    @Import(name="fc")
    private @Nullable Output<FCVolumeSourcePatchArgs> fc;

    /**
     * @return fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    public Optional<Output<FCVolumeSourcePatchArgs>> fc() {
        return Optional.ofNullable(this.fc);
    }

    /**
     * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    @Import(name="flexVolume")
    private @Nullable Output<FlexPersistentVolumeSourcePatchArgs> flexVolume;

    /**
     * @return flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    public Optional<Output<FlexPersistentVolumeSourcePatchArgs>> flexVolume() {
        return Optional.ofNullable(this.flexVolume);
    }

    /**
     * flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * 
     */
    @Import(name="flocker")
    private @Nullable Output<FlockerVolumeSourcePatchArgs> flocker;

    /**
     * @return flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * 
     */
    public Optional<Output<FlockerVolumeSourcePatchArgs>> flocker() {
        return Optional.ofNullable(this.flocker);
    }

    /**
     * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    @Import(name="gcePersistentDisk")
    private @Nullable Output<GCEPersistentDiskVolumeSourcePatchArgs> gcePersistentDisk;

    /**
     * @return gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    public Optional<Output<GCEPersistentDiskVolumeSourcePatchArgs>> gcePersistentDisk() {
        return Optional.ofNullable(this.gcePersistentDisk);
    }

    /**
     * glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    @Import(name="glusterfs")
    private @Nullable Output<GlusterfsPersistentVolumeSourcePatchArgs> glusterfs;

    /**
     * @return glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    public Optional<Output<GlusterfsPersistentVolumeSourcePatchArgs>> glusterfs() {
        return Optional.ofNullable(this.glusterfs);
    }

    /**
     * hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    @Import(name="hostPath")
    private @Nullable Output<HostPathVolumeSourcePatchArgs> hostPath;

    /**
     * @return hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    public Optional<Output<HostPathVolumeSourcePatchArgs>> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }

    /**
     * iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
     * 
     */
    @Import(name="iscsi")
    private @Nullable Output<ISCSIPersistentVolumeSourcePatchArgs> iscsi;

    /**
     * @return iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
     * 
     */
    public Optional<Output<ISCSIPersistentVolumeSourcePatchArgs>> iscsi() {
        return Optional.ofNullable(this.iscsi);
    }

    /**
     * local represents directly-attached storage with node affinity
     * 
     */
    @Import(name="local")
    private @Nullable Output<LocalVolumeSourcePatchArgs> local;

    /**
     * @return local represents directly-attached storage with node affinity
     * 
     */
    public Optional<Output<LocalVolumeSourcePatchArgs>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     * 
     */
    @Import(name="mountOptions")
    private @Nullable Output<List<String>> mountOptions;

    /**
     * @return mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     * 
     */
    public Optional<Output<List<String>>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="nfs")
    private @Nullable Output<NFSVolumeSourcePatchArgs> nfs;

    /**
     * @return nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    public Optional<Output<NFSVolumeSourcePatchArgs>> nfs() {
        return Optional.ofNullable(this.nfs);
    }

    /**
     * nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
     * 
     */
    @Import(name="nodeAffinity")
    private @Nullable Output<VolumeNodeAffinityPatchArgs> nodeAffinity;

    /**
     * @return nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
     * 
     */
    public Optional<Output<VolumeNodeAffinityPatchArgs>> nodeAffinity() {
        return Optional.ofNullable(this.nodeAffinity);
    }

    /**
     * persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     * 
     */
    @Import(name="persistentVolumeReclaimPolicy")
    private @Nullable Output<String> persistentVolumeReclaimPolicy;

    /**
     * @return persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     * 
     */
    public Optional<Output<String>> persistentVolumeReclaimPolicy() {
        return Optional.ofNullable(this.persistentVolumeReclaimPolicy);
    }

    /**
     * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    @Import(name="photonPersistentDisk")
    private @Nullable Output<PhotonPersistentDiskVolumeSourcePatchArgs> photonPersistentDisk;

    /**
     * @return photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    public Optional<Output<PhotonPersistentDiskVolumeSourcePatchArgs>> photonPersistentDisk() {
        return Optional.ofNullable(this.photonPersistentDisk);
    }

    /**
     * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="portworxVolume")
    private @Nullable Output<PortworxVolumeSourcePatchArgs> portworxVolume;

    /**
     * @return portworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    public Optional<Output<PortworxVolumeSourcePatchArgs>> portworxVolume() {
        return Optional.ofNullable(this.portworxVolume);
    }

    /**
     * quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="quobyte")
    private @Nullable Output<QuobyteVolumeSourcePatchArgs> quobyte;

    /**
     * @return quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    public Optional<Output<QuobyteVolumeSourcePatchArgs>> quobyte() {
        return Optional.ofNullable(this.quobyte);
    }

    /**
     * rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    @Import(name="rbd")
    private @Nullable Output<RBDPersistentVolumeSourcePatchArgs> rbd;

    /**
     * @return rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    public Optional<Output<RBDPersistentVolumeSourcePatchArgs>> rbd() {
        return Optional.ofNullable(this.rbd);
    }

    /**
     * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    @Import(name="scaleIO")
    private @Nullable Output<ScaleIOPersistentVolumeSourcePatchArgs> scaleIO;

    /**
     * @return scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    public Optional<Output<ScaleIOPersistentVolumeSourcePatchArgs>> scaleIO() {
        return Optional.ofNullable(this.scaleIO);
    }

    /**
     * storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     * 
     */
    @Import(name="storageClassName")
    private @Nullable Output<String> storageClassName;

    /**
     * @return storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     * 
     */
    public Optional<Output<String>> storageClassName() {
        return Optional.ofNullable(this.storageClassName);
    }

    /**
     * storageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
     * 
     */
    @Import(name="storageos")
    private @Nullable Output<StorageOSPersistentVolumeSourcePatchArgs> storageos;

    /**
     * @return storageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
     * 
     */
    public Optional<Output<StorageOSPersistentVolumeSourcePatchArgs>> storageos() {
        return Optional.ofNullable(this.storageos);
    }

    /**
     * Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.
     * 
     */
    @Import(name="volumeAttributesClassName")
    private @Nullable Output<String> volumeAttributesClassName;

    /**
     * @return Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.
     * 
     */
    public Optional<Output<String>> volumeAttributesClassName() {
        return Optional.ofNullable(this.volumeAttributesClassName);
    }

    /**
     * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
     * 
     */
    @Import(name="volumeMode")
    private @Nullable Output<String> volumeMode;

    /**
     * @return volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
     * 
     */
    public Optional<Output<String>> volumeMode() {
        return Optional.ofNullable(this.volumeMode);
    }

    /**
     * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="vsphereVolume")
    private @Nullable Output<VsphereVirtualDiskVolumeSourcePatchArgs> vsphereVolume;

    /**
     * @return vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    public Optional<Output<VsphereVirtualDiskVolumeSourcePatchArgs>> vsphereVolume() {
        return Optional.ofNullable(this.vsphereVolume);
    }

    private PersistentVolumeSpecPatchArgs() {}

    private PersistentVolumeSpecPatchArgs(PersistentVolumeSpecPatchArgs $) {
        this.accessModes = $.accessModes;
        this.awsElasticBlockStore = $.awsElasticBlockStore;
        this.azureDisk = $.azureDisk;
        this.azureFile = $.azureFile;
        this.capacity = $.capacity;
        this.cephfs = $.cephfs;
        this.cinder = $.cinder;
        this.claimRef = $.claimRef;
        this.csi = $.csi;
        this.fc = $.fc;
        this.flexVolume = $.flexVolume;
        this.flocker = $.flocker;
        this.gcePersistentDisk = $.gcePersistentDisk;
        this.glusterfs = $.glusterfs;
        this.hostPath = $.hostPath;
        this.iscsi = $.iscsi;
        this.local = $.local;
        this.mountOptions = $.mountOptions;
        this.nfs = $.nfs;
        this.nodeAffinity = $.nodeAffinity;
        this.persistentVolumeReclaimPolicy = $.persistentVolumeReclaimPolicy;
        this.photonPersistentDisk = $.photonPersistentDisk;
        this.portworxVolume = $.portworxVolume;
        this.quobyte = $.quobyte;
        this.rbd = $.rbd;
        this.scaleIO = $.scaleIO;
        this.storageClassName = $.storageClassName;
        this.storageos = $.storageos;
        this.volumeAttributesClassName = $.volumeAttributesClassName;
        this.volumeMode = $.volumeMode;
        this.vsphereVolume = $.vsphereVolume;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PersistentVolumeSpecPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PersistentVolumeSpecPatchArgs $;

        public Builder() {
            $ = new PersistentVolumeSpecPatchArgs();
        }

        public Builder(PersistentVolumeSpecPatchArgs defaults) {
            $ = new PersistentVolumeSpecPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessModes accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
         * 
         * @return builder
         * 
         */
        public Builder accessModes(@Nullable Output<List<String>> accessModes) {
            $.accessModes = accessModes;
            return this;
        }

        /**
         * @param accessModes accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
         * 
         * @return builder
         * 
         */
        public Builder accessModes(List<String> accessModes) {
            return accessModes(Output.of(accessModes));
        }

        /**
         * @param accessModes accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
         * 
         * @return builder
         * 
         */
        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }

        /**
         * @param awsElasticBlockStore awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         * 
         * @return builder
         * 
         */
        public Builder awsElasticBlockStore(@Nullable Output<AWSElasticBlockStoreVolumeSourcePatchArgs> awsElasticBlockStore) {
            $.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }

        /**
         * @param awsElasticBlockStore awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         * 
         * @return builder
         * 
         */
        public Builder awsElasticBlockStore(AWSElasticBlockStoreVolumeSourcePatchArgs awsElasticBlockStore) {
            return awsElasticBlockStore(Output.of(awsElasticBlockStore));
        }

        /**
         * @param azureDisk azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * 
         * @return builder
         * 
         */
        public Builder azureDisk(@Nullable Output<AzureDiskVolumeSourcePatchArgs> azureDisk) {
            $.azureDisk = azureDisk;
            return this;
        }

        /**
         * @param azureDisk azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         * 
         * @return builder
         * 
         */
        public Builder azureDisk(AzureDiskVolumeSourcePatchArgs azureDisk) {
            return azureDisk(Output.of(azureDisk));
        }

        /**
         * @param azureFile azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * 
         * @return builder
         * 
         */
        public Builder azureFile(@Nullable Output<AzureFilePersistentVolumeSourcePatchArgs> azureFile) {
            $.azureFile = azureFile;
            return this;
        }

        /**
         * @param azureFile azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         * 
         * @return builder
         * 
         */
        public Builder azureFile(AzureFilePersistentVolumeSourcePatchArgs azureFile) {
            return azureFile(Output.of(azureFile));
        }

        /**
         * @param capacity capacity is the description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Map<String,String>> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity capacity is the description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
         * 
         * @return builder
         * 
         */
        public Builder capacity(Map<String,String> capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param cephfs cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
         * 
         * @return builder
         * 
         */
        public Builder cephfs(@Nullable Output<CephFSPersistentVolumeSourcePatchArgs> cephfs) {
            $.cephfs = cephfs;
            return this;
        }

        /**
         * @param cephfs cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
         * 
         * @return builder
         * 
         */
        public Builder cephfs(CephFSPersistentVolumeSourcePatchArgs cephfs) {
            return cephfs(Output.of(cephfs));
        }

        /**
         * @param cinder cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         * 
         * @return builder
         * 
         */
        public Builder cinder(@Nullable Output<CinderPersistentVolumeSourcePatchArgs> cinder) {
            $.cinder = cinder;
            return this;
        }

        /**
         * @param cinder cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         * 
         * @return builder
         * 
         */
        public Builder cinder(CinderPersistentVolumeSourcePatchArgs cinder) {
            return cinder(Output.of(cinder));
        }

        /**
         * @param claimRef claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
         * 
         * @return builder
         * 
         */
        public Builder claimRef(@Nullable Output<ObjectReferencePatchArgs> claimRef) {
            $.claimRef = claimRef;
            return this;
        }

        /**
         * @param claimRef claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
         * 
         * @return builder
         * 
         */
        public Builder claimRef(ObjectReferencePatchArgs claimRef) {
            return claimRef(Output.of(claimRef));
        }

        /**
         * @param csi csi represents storage that is handled by an external CSI driver (Beta feature).
         * 
         * @return builder
         * 
         */
        public Builder csi(@Nullable Output<CSIPersistentVolumeSourcePatchArgs> csi) {
            $.csi = csi;
            return this;
        }

        /**
         * @param csi csi represents storage that is handled by an external CSI driver (Beta feature).
         * 
         * @return builder
         * 
         */
        public Builder csi(CSIPersistentVolumeSourcePatchArgs csi) {
            return csi(Output.of(csi));
        }

        /**
         * @param fc fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
         * 
         * @return builder
         * 
         */
        public Builder fc(@Nullable Output<FCVolumeSourcePatchArgs> fc) {
            $.fc = fc;
            return this;
        }

        /**
         * @param fc fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
         * 
         * @return builder
         * 
         */
        public Builder fc(FCVolumeSourcePatchArgs fc) {
            return fc(Output.of(fc));
        }

        /**
         * @param flexVolume flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         * 
         * @return builder
         * 
         */
        public Builder flexVolume(@Nullable Output<FlexPersistentVolumeSourcePatchArgs> flexVolume) {
            $.flexVolume = flexVolume;
            return this;
        }

        /**
         * @param flexVolume flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         * 
         * @return builder
         * 
         */
        public Builder flexVolume(FlexPersistentVolumeSourcePatchArgs flexVolume) {
            return flexVolume(Output.of(flexVolume));
        }

        /**
         * @param flocker flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
         * 
         * @return builder
         * 
         */
        public Builder flocker(@Nullable Output<FlockerVolumeSourcePatchArgs> flocker) {
            $.flocker = flocker;
            return this;
        }

        /**
         * @param flocker flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
         * 
         * @return builder
         * 
         */
        public Builder flocker(FlockerVolumeSourcePatchArgs flocker) {
            return flocker(Output.of(flocker));
        }

        /**
         * @param gcePersistentDisk gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         * 
         * @return builder
         * 
         */
        public Builder gcePersistentDisk(@Nullable Output<GCEPersistentDiskVolumeSourcePatchArgs> gcePersistentDisk) {
            $.gcePersistentDisk = gcePersistentDisk;
            return this;
        }

        /**
         * @param gcePersistentDisk gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         * 
         * @return builder
         * 
         */
        public Builder gcePersistentDisk(GCEPersistentDiskVolumeSourcePatchArgs gcePersistentDisk) {
            return gcePersistentDisk(Output.of(gcePersistentDisk));
        }

        /**
         * @param glusterfs glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         * 
         * @return builder
         * 
         */
        public Builder glusterfs(@Nullable Output<GlusterfsPersistentVolumeSourcePatchArgs> glusterfs) {
            $.glusterfs = glusterfs;
            return this;
        }

        /**
         * @param glusterfs glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         * 
         * @return builder
         * 
         */
        public Builder glusterfs(GlusterfsPersistentVolumeSourcePatchArgs glusterfs) {
            return glusterfs(Output.of(glusterfs));
        }

        /**
         * @param hostPath hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         * 
         * @return builder
         * 
         */
        public Builder hostPath(@Nullable Output<HostPathVolumeSourcePatchArgs> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        /**
         * @param hostPath hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         * 
         * @return builder
         * 
         */
        public Builder hostPath(HostPathVolumeSourcePatchArgs hostPath) {
            return hostPath(Output.of(hostPath));
        }

        /**
         * @param iscsi iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
         * 
         * @return builder
         * 
         */
        public Builder iscsi(@Nullable Output<ISCSIPersistentVolumeSourcePatchArgs> iscsi) {
            $.iscsi = iscsi;
            return this;
        }

        /**
         * @param iscsi iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
         * 
         * @return builder
         * 
         */
        public Builder iscsi(ISCSIPersistentVolumeSourcePatchArgs iscsi) {
            return iscsi(Output.of(iscsi));
        }

        /**
         * @param local local represents directly-attached storage with node affinity
         * 
         * @return builder
         * 
         */
        public Builder local(@Nullable Output<LocalVolumeSourcePatchArgs> local) {
            $.local = local;
            return this;
        }

        /**
         * @param local local represents directly-attached storage with node affinity
         * 
         * @return builder
         * 
         */
        public Builder local(LocalVolumeSourcePatchArgs local) {
            return local(Output.of(local));
        }

        /**
         * @param mountOptions mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(@Nullable Output<List<String>> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        /**
         * @param mountOptions mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(List<String> mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        /**
         * @param mountOptions mountOptions is the list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(String... mountOptions) {
            return mountOptions(List.of(mountOptions));
        }

        /**
         * @param nfs nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         * 
         * @return builder
         * 
         */
        public Builder nfs(@Nullable Output<NFSVolumeSourcePatchArgs> nfs) {
            $.nfs = nfs;
            return this;
        }

        /**
         * @param nfs nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         * 
         * @return builder
         * 
         */
        public Builder nfs(NFSVolumeSourcePatchArgs nfs) {
            return nfs(Output.of(nfs));
        }

        /**
         * @param nodeAffinity nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinity(@Nullable Output<VolumeNodeAffinityPatchArgs> nodeAffinity) {
            $.nodeAffinity = nodeAffinity;
            return this;
        }

        /**
         * @param nodeAffinity nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
         * 
         * @return builder
         * 
         */
        public Builder nodeAffinity(VolumeNodeAffinityPatchArgs nodeAffinity) {
            return nodeAffinity(Output.of(nodeAffinity));
        }

        /**
         * @param persistentVolumeReclaimPolicy persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
         * 
         * @return builder
         * 
         */
        public Builder persistentVolumeReclaimPolicy(@Nullable Output<String> persistentVolumeReclaimPolicy) {
            $.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
            return this;
        }

        /**
         * @param persistentVolumeReclaimPolicy persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
         * 
         * @return builder
         * 
         */
        public Builder persistentVolumeReclaimPolicy(String persistentVolumeReclaimPolicy) {
            return persistentVolumeReclaimPolicy(Output.of(persistentVolumeReclaimPolicy));
        }

        /**
         * @param photonPersistentDisk photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         * 
         * @return builder
         * 
         */
        public Builder photonPersistentDisk(@Nullable Output<PhotonPersistentDiskVolumeSourcePatchArgs> photonPersistentDisk) {
            $.photonPersistentDisk = photonPersistentDisk;
            return this;
        }

        /**
         * @param photonPersistentDisk photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         * 
         * @return builder
         * 
         */
        public Builder photonPersistentDisk(PhotonPersistentDiskVolumeSourcePatchArgs photonPersistentDisk) {
            return photonPersistentDisk(Output.of(photonPersistentDisk));
        }

        /**
         * @param portworxVolume portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         * 
         * @return builder
         * 
         */
        public Builder portworxVolume(@Nullable Output<PortworxVolumeSourcePatchArgs> portworxVolume) {
            $.portworxVolume = portworxVolume;
            return this;
        }

        /**
         * @param portworxVolume portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         * 
         * @return builder
         * 
         */
        public Builder portworxVolume(PortworxVolumeSourcePatchArgs portworxVolume) {
            return portworxVolume(Output.of(portworxVolume));
        }

        /**
         * @param quobyte quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
         * 
         * @return builder
         * 
         */
        public Builder quobyte(@Nullable Output<QuobyteVolumeSourcePatchArgs> quobyte) {
            $.quobyte = quobyte;
            return this;
        }

        /**
         * @param quobyte quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
         * 
         * @return builder
         * 
         */
        public Builder quobyte(QuobyteVolumeSourcePatchArgs quobyte) {
            return quobyte(Output.of(quobyte));
        }

        /**
         * @param rbd rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         * 
         * @return builder
         * 
         */
        public Builder rbd(@Nullable Output<RBDPersistentVolumeSourcePatchArgs> rbd) {
            $.rbd = rbd;
            return this;
        }

        /**
         * @param rbd rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         * 
         * @return builder
         * 
         */
        public Builder rbd(RBDPersistentVolumeSourcePatchArgs rbd) {
            return rbd(Output.of(rbd));
        }

        /**
         * @param scaleIO scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * 
         * @return builder
         * 
         */
        public Builder scaleIO(@Nullable Output<ScaleIOPersistentVolumeSourcePatchArgs> scaleIO) {
            $.scaleIO = scaleIO;
            return this;
        }

        /**
         * @param scaleIO scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         * 
         * @return builder
         * 
         */
        public Builder scaleIO(ScaleIOPersistentVolumeSourcePatchArgs scaleIO) {
            return scaleIO(Output.of(scaleIO));
        }

        /**
         * @param storageClassName storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
         * 
         * @return builder
         * 
         */
        public Builder storageClassName(@Nullable Output<String> storageClassName) {
            $.storageClassName = storageClassName;
            return this;
        }

        /**
         * @param storageClassName storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
         * 
         * @return builder
         * 
         */
        public Builder storageClassName(String storageClassName) {
            return storageClassName(Output.of(storageClassName));
        }

        /**
         * @param storageos storageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
         * 
         * @return builder
         * 
         */
        public Builder storageos(@Nullable Output<StorageOSPersistentVolumeSourcePatchArgs> storageos) {
            $.storageos = storageos;
            return this;
        }

        /**
         * @param storageos storageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
         * 
         * @return builder
         * 
         */
        public Builder storageos(StorageOSPersistentVolumeSourcePatchArgs storageos) {
            return storageos(Output.of(storageos));
        }

        /**
         * @param volumeAttributesClassName Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.
         * 
         * @return builder
         * 
         */
        public Builder volumeAttributesClassName(@Nullable Output<String> volumeAttributesClassName) {
            $.volumeAttributesClassName = volumeAttributesClassName;
            return this;
        }

        /**
         * @param volumeAttributesClassName Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is an alpha field and requires enabling VolumeAttributesClass feature.
         * 
         * @return builder
         * 
         */
        public Builder volumeAttributesClassName(String volumeAttributesClassName) {
            return volumeAttributesClassName(Output.of(volumeAttributesClassName));
        }

        /**
         * @param volumeMode volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
         * 
         * @return builder
         * 
         */
        public Builder volumeMode(@Nullable Output<String> volumeMode) {
            $.volumeMode = volumeMode;
            return this;
        }

        /**
         * @param volumeMode volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
         * 
         * @return builder
         * 
         */
        public Builder volumeMode(String volumeMode) {
            return volumeMode(Output.of(volumeMode));
        }

        /**
         * @param vsphereVolume vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         * 
         * @return builder
         * 
         */
        public Builder vsphereVolume(@Nullable Output<VsphereVirtualDiskVolumeSourcePatchArgs> vsphereVolume) {
            $.vsphereVolume = vsphereVolume;
            return this;
        }

        /**
         * @param vsphereVolume vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         * 
         * @return builder
         * 
         */
        public Builder vsphereVolume(VsphereVirtualDiskVolumeSourcePatchArgs vsphereVolume) {
            return vsphereVolume(Output.of(vsphereVolume));
        }

        public PersistentVolumeSpecPatchArgs build() {
            return $;
        }
    }

}
