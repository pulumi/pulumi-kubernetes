// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceConstraint must have exactly one field set besides Requests.
 * 
 */
public final class DeviceConstraintPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceConstraintPatchArgs Empty = new DeviceConstraintPatchArgs();

    /**
     * MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.
     * 
     * For example, if you specified &#34;dra.example.com/numa&#34; (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn&#39;t, then it also will not be chosen.
     * 
     * Must include the domain qualifier.
     * 
     */
    @Import(name="matchAttribute")
    private @Nullable Output<String> matchAttribute;

    /**
     * @return MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.
     * 
     * For example, if you specified &#34;dra.example.com/numa&#34; (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn&#39;t, then it also will not be chosen.
     * 
     * Must include the domain qualifier.
     * 
     */
    public Optional<Output<String>> matchAttribute() {
        return Optional.ofNullable(this.matchAttribute);
    }

    /**
     * Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
     * 
     */
    @Import(name="requests")
    private @Nullable Output<List<String>> requests;

    /**
     * @return Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
     * 
     */
    public Optional<Output<List<String>>> requests() {
        return Optional.ofNullable(this.requests);
    }

    private DeviceConstraintPatchArgs() {}

    private DeviceConstraintPatchArgs(DeviceConstraintPatchArgs $) {
        this.matchAttribute = $.matchAttribute;
        this.requests = $.requests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceConstraintPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceConstraintPatchArgs $;

        public Builder() {
            $ = new DeviceConstraintPatchArgs();
        }

        public Builder(DeviceConstraintPatchArgs defaults) {
            $ = new DeviceConstraintPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchAttribute MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.
         * 
         * For example, if you specified &#34;dra.example.com/numa&#34; (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn&#39;t, then it also will not be chosen.
         * 
         * Must include the domain qualifier.
         * 
         * @return builder
         * 
         */
        public Builder matchAttribute(@Nullable Output<String> matchAttribute) {
            $.matchAttribute = matchAttribute;
            return this;
        }

        /**
         * @param matchAttribute MatchAttribute requires that all devices in question have this attribute and that its type and value are the same across those devices.
         * 
         * For example, if you specified &#34;dra.example.com/numa&#34; (a hypothetical example!), then only devices in the same NUMA node will be chosen. A device which does not have that attribute will not be chosen. All devices should use a value of the same type for this attribute because that is part of its specification, but if one device doesn&#39;t, then it also will not be chosen.
         * 
         * Must include the domain qualifier.
         * 
         * @return builder
         * 
         */
        public Builder matchAttribute(String matchAttribute) {
            return matchAttribute(Output.of(matchAttribute));
        }

        /**
         * @param requests Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<List<String>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
         * 
         * @return builder
         * 
         */
        public Builder requests(List<String> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests Requests is a list of the one or more requests in this claim which must co-satisfy this constraint. If a request is fulfilled by multiple devices, then all of the devices must satisfy the constraint. If this is not specified, this constraint applies to all requests in this claim.
         * 
         * @return builder
         * 
         */
        public Builder requests(String... requests) {
            return requests(List.of(requests));
        }

        public DeviceConstraintPatchArgs build() {
            return $;
        }
    }

}
