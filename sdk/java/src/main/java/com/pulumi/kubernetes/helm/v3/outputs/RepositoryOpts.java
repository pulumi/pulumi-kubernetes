// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.helm.v3.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RepositoryOpts {
    /**
     * @return The Repository&#39;s CA File
     * 
     */
    private @Nullable String caFile;
    /**
     * @return The repository&#39;s cert file
     * 
     */
    private @Nullable String certFile;
    /**
     * @return The repository&#39;s cert key file
     * 
     */
    private @Nullable String keyFile;
    /**
     * @return Password for HTTP basic authentication
     * 
     */
    private @Nullable String password;
    /**
     * @return Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
     * 
     */
    private @Nullable String repo;
    /**
     * @return Username for HTTP basic authentication
     * 
     */
    private @Nullable String username;

    private RepositoryOpts() {}
    /**
     * @return The Repository&#39;s CA File
     * 
     */
    public Optional<String> caFile() {
        return Optional.ofNullable(this.caFile);
    }
    /**
     * @return The repository&#39;s cert file
     * 
     */
    public Optional<String> certFile() {
        return Optional.ofNullable(this.certFile);
    }
    /**
     * @return The repository&#39;s cert key file
     * 
     */
    public Optional<String> keyFile() {
        return Optional.ofNullable(this.keyFile);
    }
    /**
     * @return Password for HTTP basic authentication
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
     * 
     */
    public Optional<String> repo() {
        return Optional.ofNullable(this.repo);
    }
    /**
     * @return Username for HTTP basic authentication
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RepositoryOpts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caFile;
        private @Nullable String certFile;
        private @Nullable String keyFile;
        private @Nullable String password;
        private @Nullable String repo;
        private @Nullable String username;
        public Builder() {}
        public Builder(RepositoryOpts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caFile = defaults.caFile;
    	      this.certFile = defaults.certFile;
    	      this.keyFile = defaults.keyFile;
    	      this.password = defaults.password;
    	      this.repo = defaults.repo;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder caFile(@Nullable String caFile) {
            this.caFile = caFile;
            return this;
        }
        @CustomType.Setter
        public Builder certFile(@Nullable String certFile) {
            this.certFile = certFile;
            return this;
        }
        @CustomType.Setter
        public Builder keyFile(@Nullable String keyFile) {
            this.keyFile = keyFile;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder repo(@Nullable String repo) {
            this.repo = repo;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        public RepositoryOpts build() {
            final var o = new RepositoryOpts();
            o.caFile = caFile;
            o.certFile = certFile;
            o.keyFile = keyFile;
            o.password = password;
            o.repo = repo;
            o.username = username;
            return o;
        }
    }
}
