// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.ExecActionPatch;
import com.pulumi.kubernetes.core.v1.outputs.HTTPGetActionPatch;
import com.pulumi.kubernetes.core.v1.outputs.SleepActionPatch;
import com.pulumi.kubernetes.core.v1.outputs.TCPSocketActionPatch;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LifecycleHandlerPatch {
    /**
     * @return Exec specifies a command to execute in the container.
     * 
     */
    private @Nullable ExecActionPatch exec;
    /**
     * @return HTTPGet specifies an HTTP GET request to perform.
     * 
     */
    private @Nullable HTTPGetActionPatch httpGet;
    /**
     * @return Sleep represents a duration that the container should sleep.
     * 
     */
    private @Nullable SleepActionPatch sleep;
    /**
     * @return Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility. There is no validation of this field and lifecycle hooks will fail at runtime when it is specified.
     * 
     */
    private @Nullable TCPSocketActionPatch tcpSocket;

    private LifecycleHandlerPatch() {}
    /**
     * @return Exec specifies a command to execute in the container.
     * 
     */
    public Optional<ExecActionPatch> exec() {
        return Optional.ofNullable(this.exec);
    }
    /**
     * @return HTTPGet specifies an HTTP GET request to perform.
     * 
     */
    public Optional<HTTPGetActionPatch> httpGet() {
        return Optional.ofNullable(this.httpGet);
    }
    /**
     * @return Sleep represents a duration that the container should sleep.
     * 
     */
    public Optional<SleepActionPatch> sleep() {
        return Optional.ofNullable(this.sleep);
    }
    /**
     * @return Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility. There is no validation of this field and lifecycle hooks will fail at runtime when it is specified.
     * 
     */
    public Optional<TCPSocketActionPatch> tcpSocket() {
        return Optional.ofNullable(this.tcpSocket);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecycleHandlerPatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ExecActionPatch exec;
        private @Nullable HTTPGetActionPatch httpGet;
        private @Nullable SleepActionPatch sleep;
        private @Nullable TCPSocketActionPatch tcpSocket;
        public Builder() {}
        public Builder(LifecycleHandlerPatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.httpGet = defaults.httpGet;
    	      this.sleep = defaults.sleep;
    	      this.tcpSocket = defaults.tcpSocket;
        }

        @CustomType.Setter
        public Builder exec(@Nullable ExecActionPatch exec) {

            this.exec = exec;
            return this;
        }
        @CustomType.Setter
        public Builder httpGet(@Nullable HTTPGetActionPatch httpGet) {

            this.httpGet = httpGet;
            return this;
        }
        @CustomType.Setter
        public Builder sleep(@Nullable SleepActionPatch sleep) {

            this.sleep = sleep;
            return this;
        }
        @CustomType.Setter
        public Builder tcpSocket(@Nullable TCPSocketActionPatch tcpSocket) {

            this.tcpSocket = tcpSocket;
            return this;
        }
        public LifecycleHandlerPatch build() {
            final var _resultValue = new LifecycleHandlerPatch();
            _resultValue.exec = exec;
            _resultValue.httpGet = httpGet;
            _resultValue.sleep = sleep;
            _resultValue.tcpSocket = tcpSocket;
            return _resultValue;
        }
    }
}
