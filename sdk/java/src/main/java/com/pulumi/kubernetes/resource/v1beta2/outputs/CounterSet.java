// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1beta2.outputs.Counter;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class CounterSet {
    /**
     * @return Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
     * 
     * The maximum number of counters in all sets is 32.
     * 
     */
    private Map<String,Counter> counters;
    /**
     * @return Name defines the name of the counter set. It must be a DNS label.
     * 
     */
    private String name;

    private CounterSet() {}
    /**
     * @return Counters defines the set of counters for this CounterSet The name of each counter must be unique in that set and must be a DNS label.
     * 
     * The maximum number of counters in all sets is 32.
     * 
     */
    public Map<String,Counter> counters() {
        return this.counters;
    }
    /**
     * @return Name defines the name of the counter set. It must be a DNS label.
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CounterSet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Counter> counters;
        private String name;
        public Builder() {}
        public Builder(CounterSet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counters = defaults.counters;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder counters(Map<String,Counter> counters) {
            if (counters == null) {
              throw new MissingRequiredPropertyException("CounterSet", "counters");
            }
            this.counters = counters;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("CounterSet", "name");
            }
            this.name = name;
            return this;
        }
        public CounterSet build() {
            final var _resultValue = new CounterSet();
            _resultValue.counters = counters;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
