// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.meta.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.meta.v1.outputs.LabelSelectorRequirement;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class LabelSelector {
    /**
     * @return matchExpressions is a list of label selector requirements. The requirements are ANDed.
     * 
     */
    private @Nullable List<LabelSelectorRequirement> matchExpressions;
    /**
     * @return matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &#34;key&#34;, the operator is &#34;In&#34;, and the values array contains only &#34;value&#34;. The requirements are ANDed.
     * 
     */
    private @Nullable Map<String,String> matchLabels;

    private LabelSelector() {}
    /**
     * @return matchExpressions is a list of label selector requirements. The requirements are ANDed.
     * 
     */
    public List<LabelSelectorRequirement> matchExpressions() {
        return this.matchExpressions == null ? List.of() : this.matchExpressions;
    }
    /**
     * @return matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &#34;key&#34;, the operator is &#34;In&#34;, and the values array contains only &#34;value&#34;. The requirements are ANDed.
     * 
     */
    public Map<String,String> matchLabels() {
        return this.matchLabels == null ? Map.of() : this.matchLabels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LabelSelector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<LabelSelectorRequirement> matchExpressions;
        private @Nullable Map<String,String> matchLabels;
        public Builder() {}
        public Builder(LabelSelector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchExpressions = defaults.matchExpressions;
    	      this.matchLabels = defaults.matchLabels;
        }

        @CustomType.Setter
        public Builder matchExpressions(@Nullable List<LabelSelectorRequirement> matchExpressions) {
            this.matchExpressions = matchExpressions;
            return this;
        }
        public Builder matchExpressions(LabelSelectorRequirement... matchExpressions) {
            return matchExpressions(List.of(matchExpressions));
        }
        @CustomType.Setter
        public Builder matchLabels(@Nullable Map<String,String> matchLabels) {
            this.matchLabels = matchLabels;
            return this;
        }
        public LabelSelector build() {
            final var o = new LabelSelector();
            o.matchExpressions = matchExpressions;
            o.matchLabels = matchLabels;
            return o;
        }
    }
}
