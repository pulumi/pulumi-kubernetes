// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.DeviceClaimConfigurationPatchArgs;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.DeviceConstraintPatchArgs;
import com.pulumi.kubernetes.resource.v1alpha3.inputs.DeviceRequestPatchArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DeviceClaim defines how to request devices with a ResourceClaim.
 * 
 */
public final class DeviceClaimPatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceClaimPatchArgs Empty = new DeviceClaimPatchArgs();

    /**
     * This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
     * 
     */
    @Import(name="config")
    private @Nullable Output<List<DeviceClaimConfigurationPatchArgs>> config;

    /**
     * @return This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
     * 
     */
    public Optional<Output<List<DeviceClaimConfigurationPatchArgs>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * These constraints must be satisfied by the set of devices that get allocated for the claim.
     * 
     */
    @Import(name="constraints")
    private @Nullable Output<List<DeviceConstraintPatchArgs>> constraints;

    /**
     * @return These constraints must be satisfied by the set of devices that get allocated for the claim.
     * 
     */
    public Optional<Output<List<DeviceConstraintPatchArgs>>> constraints() {
        return Optional.ofNullable(this.constraints);
    }

    /**
     * Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
     * 
     */
    @Import(name="requests")
    private @Nullable Output<List<DeviceRequestPatchArgs>> requests;

    /**
     * @return Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
     * 
     */
    public Optional<Output<List<DeviceRequestPatchArgs>>> requests() {
        return Optional.ofNullable(this.requests);
    }

    private DeviceClaimPatchArgs() {}

    private DeviceClaimPatchArgs(DeviceClaimPatchArgs $) {
        this.config = $.config;
        this.constraints = $.constraints;
        this.requests = $.requests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceClaimPatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceClaimPatchArgs $;

        public Builder() {
            $ = new DeviceClaimPatchArgs();
        }

        public Builder(DeviceClaimPatchArgs defaults) {
            $ = new DeviceClaimPatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<List<DeviceClaimConfigurationPatchArgs>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
         * 
         * @return builder
         * 
         */
        public Builder config(List<DeviceClaimConfigurationPatchArgs> config) {
            return config(Output.of(config));
        }

        /**
         * @param config This field holds configuration for multiple potential drivers which could satisfy requests in this claim. It is ignored while allocating the claim.
         * 
         * @return builder
         * 
         */
        public Builder config(DeviceClaimConfigurationPatchArgs... config) {
            return config(List.of(config));
        }

        /**
         * @param constraints These constraints must be satisfied by the set of devices that get allocated for the claim.
         * 
         * @return builder
         * 
         */
        public Builder constraints(@Nullable Output<List<DeviceConstraintPatchArgs>> constraints) {
            $.constraints = constraints;
            return this;
        }

        /**
         * @param constraints These constraints must be satisfied by the set of devices that get allocated for the claim.
         * 
         * @return builder
         * 
         */
        public Builder constraints(List<DeviceConstraintPatchArgs> constraints) {
            return constraints(Output.of(constraints));
        }

        /**
         * @param constraints These constraints must be satisfied by the set of devices that get allocated for the claim.
         * 
         * @return builder
         * 
         */
        public Builder constraints(DeviceConstraintPatchArgs... constraints) {
            return constraints(List.of(constraints));
        }

        /**
         * @param requests Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<List<DeviceRequestPatchArgs>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
         * 
         * @return builder
         * 
         */
        public Builder requests(List<DeviceRequestPatchArgs> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests Requests represent individual requests for distinct devices which must all be satisfied. If empty, nothing needs to be allocated.
         * 
         * @return builder
         * 
         */
        public Builder requests(DeviceRequestPatchArgs... requests) {
            return requests(List.of(requests));
        }

        public DeviceClaimPatchArgs build() {
            return $;
        }
    }

}
