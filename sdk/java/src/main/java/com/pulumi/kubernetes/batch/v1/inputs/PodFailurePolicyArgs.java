// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.batch.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.batch.v1.inputs.PodFailurePolicyRuleArgs;
import java.util.List;
import java.util.Objects;


/**
 * PodFailurePolicy describes how failed pods influence the backoffLimit.
 * 
 */
public final class PodFailurePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodFailurePolicyArgs Empty = new PodFailurePolicyArgs();

    /**
     * A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<PodFailurePolicyRuleArgs>> rules;

    /**
     * @return A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
     * 
     */
    public Output<List<PodFailurePolicyRuleArgs>> rules() {
        return this.rules;
    }

    private PodFailurePolicyArgs() {}

    private PodFailurePolicyArgs(PodFailurePolicyArgs $) {
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PodFailurePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PodFailurePolicyArgs $;

        public Builder() {
            $ = new PodFailurePolicyArgs();
        }

        public Builder(PodFailurePolicyArgs defaults) {
            $ = new PodFailurePolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<PodFailurePolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<PodFailurePolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
         * 
         * @return builder
         * 
         */
        public Builder rules(PodFailurePolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public PodFailurePolicyArgs build() {
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
