// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.SecretReferencePatch;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CSIPersistentVolumeSourcePatch {
    /**
     * @return controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private @Nullable SecretReferencePatch controllerExpandSecretRef;
    /**
     * @return controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private @Nullable SecretReferencePatch controllerPublishSecretRef;
    /**
     * @return driver is the name of the driver to use for this volume. Required.
     * 
     */
    private @Nullable String driver;
    /**
     * @return fsType to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;.
     * 
     */
    private @Nullable String fsType;
    /**
     * @return nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private @Nullable SecretReferencePatch nodeExpandSecretRef;
    /**
     * @return nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private @Nullable SecretReferencePatch nodePublishSecretRef;
    /**
     * @return nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private @Nullable SecretReferencePatch nodeStageSecretRef;
    /**
     * @return readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
     * 
     */
    private @Nullable Boolean readOnly;
    /**
     * @return volumeAttributes of the volume to publish.
     * 
     */
    private @Nullable Map<String,String> volumeAttributes;
    /**
     * @return volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
     * 
     */
    private @Nullable String volumeHandle;

    private CSIPersistentVolumeSourcePatch() {}
    /**
     * @return controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReferencePatch> controllerExpandSecretRef() {
        return Optional.ofNullable(this.controllerExpandSecretRef);
    }
    /**
     * @return controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReferencePatch> controllerPublishSecretRef() {
        return Optional.ofNullable(this.controllerPublishSecretRef);
    }
    /**
     * @return driver is the name of the driver to use for this volume. Required.
     * 
     */
    public Optional<String> driver() {
        return Optional.ofNullable(this.driver);
    }
    /**
     * @return fsType to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;.
     * 
     */
    public Optional<String> fsType() {
        return Optional.ofNullable(this.fsType);
    }
    /**
     * @return nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReferencePatch> nodeExpandSecretRef() {
        return Optional.ofNullable(this.nodeExpandSecretRef);
    }
    /**
     * @return nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReferencePatch> nodePublishSecretRef() {
        return Optional.ofNullable(this.nodePublishSecretRef);
    }
    /**
     * @return nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReferencePatch> nodeStageSecretRef() {
        return Optional.ofNullable(this.nodeStageSecretRef);
    }
    /**
     * @return readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    /**
     * @return volumeAttributes of the volume to publish.
     * 
     */
    public Map<String,String> volumeAttributes() {
        return this.volumeAttributes == null ? Map.of() : this.volumeAttributes;
    }
    /**
     * @return volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
     * 
     */
    public Optional<String> volumeHandle() {
        return Optional.ofNullable(this.volumeHandle);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CSIPersistentVolumeSourcePatch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable SecretReferencePatch controllerExpandSecretRef;
        private @Nullable SecretReferencePatch controllerPublishSecretRef;
        private @Nullable String driver;
        private @Nullable String fsType;
        private @Nullable SecretReferencePatch nodeExpandSecretRef;
        private @Nullable SecretReferencePatch nodePublishSecretRef;
        private @Nullable SecretReferencePatch nodeStageSecretRef;
        private @Nullable Boolean readOnly;
        private @Nullable Map<String,String> volumeAttributes;
        private @Nullable String volumeHandle;
        public Builder() {}
        public Builder(CSIPersistentVolumeSourcePatch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controllerExpandSecretRef = defaults.controllerExpandSecretRef;
    	      this.controllerPublishSecretRef = defaults.controllerPublishSecretRef;
    	      this.driver = defaults.driver;
    	      this.fsType = defaults.fsType;
    	      this.nodeExpandSecretRef = defaults.nodeExpandSecretRef;
    	      this.nodePublishSecretRef = defaults.nodePublishSecretRef;
    	      this.nodeStageSecretRef = defaults.nodeStageSecretRef;
    	      this.readOnly = defaults.readOnly;
    	      this.volumeAttributes = defaults.volumeAttributes;
    	      this.volumeHandle = defaults.volumeHandle;
        }

        @CustomType.Setter
        public Builder controllerExpandSecretRef(@Nullable SecretReferencePatch controllerExpandSecretRef) {
            this.controllerExpandSecretRef = controllerExpandSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder controllerPublishSecretRef(@Nullable SecretReferencePatch controllerPublishSecretRef) {
            this.controllerPublishSecretRef = controllerPublishSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder driver(@Nullable String driver) {
            this.driver = driver;
            return this;
        }
        @CustomType.Setter
        public Builder fsType(@Nullable String fsType) {
            this.fsType = fsType;
            return this;
        }
        @CustomType.Setter
        public Builder nodeExpandSecretRef(@Nullable SecretReferencePatch nodeExpandSecretRef) {
            this.nodeExpandSecretRef = nodeExpandSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder nodePublishSecretRef(@Nullable SecretReferencePatch nodePublishSecretRef) {
            this.nodePublishSecretRef = nodePublishSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder nodeStageSecretRef(@Nullable SecretReferencePatch nodeStageSecretRef) {
            this.nodeStageSecretRef = nodeStageSecretRef;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder volumeAttributes(@Nullable Map<String,String> volumeAttributes) {
            this.volumeAttributes = volumeAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder volumeHandle(@Nullable String volumeHandle) {
            this.volumeHandle = volumeHandle;
            return this;
        }
        public CSIPersistentVolumeSourcePatch build() {
            final var o = new CSIPersistentVolumeSourcePatch();
            o.controllerExpandSecretRef = controllerExpandSecretRef;
            o.controllerPublishSecretRef = controllerPublishSecretRef;
            o.driver = driver;
            o.fsType = fsType;
            o.nodeExpandSecretRef = nodeExpandSecretRef;
            o.nodePublishSecretRef = nodePublishSecretRef;
            o.nodeStageSecretRef = nodeStageSecretRef;
            o.readOnly = readOnly;
            o.volumeAttributes = volumeAttributes;
            o.volumeHandle = volumeHandle;
            return o;
        }
    }
}
