// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.authorization.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.authorization.v1.outputs.NonResourceAttributes;
import com.pulumi.kubernetes.authorization.v1.outputs.ResourceAttributes;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SubjectAccessReviewSpec {
    /**
     * @return Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
     * 
     */
    private @Nullable Map<String,List<String>> extra;
    /**
     * @return Groups is the groups you&#39;re testing for.
     * 
     */
    private @Nullable List<String> groups;
    /**
     * @return NonResourceAttributes describes information for a non-resource access request
     * 
     */
    private @Nullable NonResourceAttributes nonResourceAttributes;
    /**
     * @return ResourceAuthorizationAttributes describes information for a resource access request
     * 
     */
    private @Nullable ResourceAttributes resourceAttributes;
    /**
     * @return UID information about the requesting user.
     * 
     */
    private @Nullable String uid;
    /**
     * @return User is the user you&#39;re testing for. If you specify &#34;User&#34; but not &#34;Groups&#34;, then is it interpreted as &#34;What if User were not a member of any groups
     * 
     */
    private @Nullable String user;

    private SubjectAccessReviewSpec() {}
    /**
     * @return Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
     * 
     */
    public Map<String,List<String>> extra() {
        return this.extra == null ? Map.of() : this.extra;
    }
    /**
     * @return Groups is the groups you&#39;re testing for.
     * 
     */
    public List<String> groups() {
        return this.groups == null ? List.of() : this.groups;
    }
    /**
     * @return NonResourceAttributes describes information for a non-resource access request
     * 
     */
    public Optional<NonResourceAttributes> nonResourceAttributes() {
        return Optional.ofNullable(this.nonResourceAttributes);
    }
    /**
     * @return ResourceAuthorizationAttributes describes information for a resource access request
     * 
     */
    public Optional<ResourceAttributes> resourceAttributes() {
        return Optional.ofNullable(this.resourceAttributes);
    }
    /**
     * @return UID information about the requesting user.
     * 
     */
    public Optional<String> uid() {
        return Optional.ofNullable(this.uid);
    }
    /**
     * @return User is the user you&#39;re testing for. If you specify &#34;User&#34; but not &#34;Groups&#34;, then is it interpreted as &#34;What if User were not a member of any groups
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubjectAccessReviewSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,List<String>> extra;
        private @Nullable List<String> groups;
        private @Nullable NonResourceAttributes nonResourceAttributes;
        private @Nullable ResourceAttributes resourceAttributes;
        private @Nullable String uid;
        private @Nullable String user;
        public Builder() {}
        public Builder(SubjectAccessReviewSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extra = defaults.extra;
    	      this.groups = defaults.groups;
    	      this.nonResourceAttributes = defaults.nonResourceAttributes;
    	      this.resourceAttributes = defaults.resourceAttributes;
    	      this.uid = defaults.uid;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder extra(@Nullable Map<String,List<String>> extra) {
            this.extra = extra;
            return this;
        }
        @CustomType.Setter
        public Builder groups(@Nullable List<String> groups) {
            this.groups = groups;
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder nonResourceAttributes(@Nullable NonResourceAttributes nonResourceAttributes) {
            this.nonResourceAttributes = nonResourceAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder resourceAttributes(@Nullable ResourceAttributes resourceAttributes) {
            this.resourceAttributes = resourceAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable String uid) {
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }
        public SubjectAccessReviewSpec build() {
            final var o = new SubjectAccessReviewSpec();
            o.extra = extra;
            o.groups = groups;
            o.nonResourceAttributes = nonResourceAttributes;
            o.resourceAttributes = resourceAttributes;
            o.uid = uid;
            o.user = user;
            return o;
        }
    }
}
