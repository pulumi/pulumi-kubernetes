// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core.v1.inputs.ScopeSelectorArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
 * 
 */
public final class ResourceQuotaSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceQuotaSpecArgs Empty = new ResourceQuotaSpecArgs();

    /**
     * hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
     * 
     */
    @Import(name="hard")
    private @Nullable Output<Map<String,String>> hard;

    /**
     * @return hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
     * 
     */
    public Optional<Output<Map<String,String>>> hard() {
        return Optional.ofNullable(this.hard);
    }

    /**
     * scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
     * 
     */
    @Import(name="scopeSelector")
    private @Nullable Output<ScopeSelectorArgs> scopeSelector;

    /**
     * @return scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
     * 
     */
    public Optional<Output<ScopeSelectorArgs>> scopeSelector() {
        return Optional.ofNullable(this.scopeSelector);
    }

    /**
     * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    /**
     * @return A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
     * 
     */
    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    private ResourceQuotaSpecArgs() {}

    private ResourceQuotaSpecArgs(ResourceQuotaSpecArgs $) {
        this.hard = $.hard;
        this.scopeSelector = $.scopeSelector;
        this.scopes = $.scopes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceQuotaSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceQuotaSpecArgs $;

        public Builder() {
            $ = new ResourceQuotaSpecArgs();
        }

        public Builder(ResourceQuotaSpecArgs defaults) {
            $ = new ResourceQuotaSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hard hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
         * 
         * @return builder
         * 
         */
        public Builder hard(@Nullable Output<Map<String,String>> hard) {
            $.hard = hard;
            return this;
        }

        /**
         * @param hard hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
         * 
         * @return builder
         * 
         */
        public Builder hard(Map<String,String> hard) {
            return hard(Output.of(hard));
        }

        /**
         * @param scopeSelector scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
         * 
         * @return builder
         * 
         */
        public Builder scopeSelector(@Nullable Output<ScopeSelectorArgs> scopeSelector) {
            $.scopeSelector = scopeSelector;
            return this;
        }

        /**
         * @param scopeSelector scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
         * 
         * @return builder
         * 
         */
        public Builder scopeSelector(ScopeSelectorArgs scopeSelector) {
            return scopeSelector(Output.of(scopeSelector));
        }

        /**
         * @param scopes A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
         * 
         * @return builder
         * 
         */
        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param scopes A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
         * 
         * @return builder
         * 
         */
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public ResourceQuotaSpecArgs build() {
            return $;
        }
    }

}
