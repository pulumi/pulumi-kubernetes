// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.resource.v1alpha3.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.kubernetes.resource.v1alpha3.outputs.Counter;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class DeviceCounterConsumption {
    /**
     * @return CounterSet defines the set from which the counters defined will be consumed.
     * 
     */
    private String counterSet;
    /**
     * @return Counters defines the Counter that will be consumed by the device.
     * 
     * The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    private Map<String,Counter> counters;

    private DeviceCounterConsumption() {}
    /**
     * @return CounterSet defines the set from which the counters defined will be consumed.
     * 
     */
    public String counterSet() {
        return this.counterSet;
    }
    /**
     * @return Counters defines the Counter that will be consumed by the device.
     * 
     * The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each).
     * 
     */
    public Map<String,Counter> counters() {
        return this.counters;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeviceCounterConsumption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String counterSet;
        private Map<String,Counter> counters;
        public Builder() {}
        public Builder(DeviceCounterConsumption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counterSet = defaults.counterSet;
    	      this.counters = defaults.counters;
        }

        @CustomType.Setter
        public Builder counterSet(String counterSet) {
            if (counterSet == null) {
              throw new MissingRequiredPropertyException("DeviceCounterConsumption", "counterSet");
            }
            this.counterSet = counterSet;
            return this;
        }
        @CustomType.Setter
        public Builder counters(Map<String,Counter> counters) {
            if (counters == null) {
              throw new MissingRequiredPropertyException("DeviceCounterConsumption", "counters");
            }
            this.counters = counters;
            return this;
        }
        public DeviceCounterConsumption build() {
            final var _resultValue = new DeviceCounterConsumption();
            _resultValue.counterSet = counterSet;
            _resultValue.counters = counters;
            return _resultValue;
        }
    }
}
