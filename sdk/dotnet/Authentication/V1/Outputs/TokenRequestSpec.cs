// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Authentication.V1
{

    [OutputType]
    public sealed class TokenRequestSpec
    {
        /// <summary>
        /// Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
        /// </summary>
        public readonly ImmutableArray<string> Audiences;
        /// <summary>
        /// BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Authentication.V1.BoundObjectReference BoundObjectRef;
        /// <summary>
        /// ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
        /// </summary>
        public readonly int ExpirationSeconds;

        [OutputConstructor]
        private TokenRequestSpec(
            ImmutableArray<string> audiences,

            Pulumi.Kubernetes.Types.Outputs.Authentication.V1.BoundObjectReference boundObjectRef,

            int expirationSeconds)
        {
            Audiences = audiences;
            BoundObjectRef = boundObjectRef;
            ExpirationSeconds = expirationSeconds;
        }
    }
}
