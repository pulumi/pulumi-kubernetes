// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Batch.V1
{

    /// <summary>
    /// SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
    /// </summary>
    public class SuccessPolicyPatchArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Batch.V1.SuccessPolicyRulePatchArgs>? _rules;

        /// <summary>
        /// rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded &gt;= .spec.completions`. Once any of the rules are met, the "SucceededCriteriaMet" condition is added, and the lingering pods are removed. The terminal state for such a Job has the "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Batch.V1.SuccessPolicyRulePatchArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Pulumi.Kubernetes.Types.Inputs.Batch.V1.SuccessPolicyRulePatchArgs>());
            set => _rules = value;
        }

        public SuccessPolicyPatchArgs()
        {
        }
        public static new SuccessPolicyPatchArgs Empty => new SuccessPolicyPatchArgs();
    }
}
