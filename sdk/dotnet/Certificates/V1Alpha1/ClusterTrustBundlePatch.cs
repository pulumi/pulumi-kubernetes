// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Certificates.V1Alpha1
{
    /// <summary>
    /// Patch resources are used to modify existing Kubernetes resources by using
    /// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
    /// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
    /// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
    /// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
    /// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
    /// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
    /// 
    /// ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the `clusterTrustBundle` projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.
    /// 
    /// It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.
    /// </summary>
    [KubernetesResourceType("kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundlePatch")]
    public partial class ClusterTrustBundlePatch : KubernetesResource
    {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// metadata contains the object metadata.
        /// </summary>
        [Output("metadata")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Meta.V1.ObjectMetaPatch> Metadata { get; private set; } = null!;

        /// <summary>
        /// spec contains the signer (if any) and trust anchors.
        /// </summary>
        [Output("spec")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Certificates.V1Alpha1.ClusterTrustBundleSpecPatch> Spec { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterTrustBundlePatch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterTrustBundlePatch(string name, Pulumi.Kubernetes.Types.Inputs.Certificates.V1Alpha1.ClusterTrustBundlePatchArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundlePatch", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }
        internal ClusterTrustBundlePatch(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundlePatch", name, new DictionaryResourceArgs(dictionary), MakeResourceOptions(options, ""))
        {
        }

        private ClusterTrustBundlePatch(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundlePatch", name, null, MakeResourceOptions(options, id))
        {
        }

        private static Pulumi.Kubernetes.Types.Inputs.Certificates.V1Alpha1.ClusterTrustBundlePatchArgs? MakeArgs(Pulumi.Kubernetes.Types.Inputs.Certificates.V1Alpha1.ClusterTrustBundlePatchArgs? args)
        {
            args ??= new Pulumi.Kubernetes.Types.Inputs.Certificates.V1Alpha1.ClusterTrustBundlePatchArgs();
            args.ApiVersion = "certificates.k8s.io/v1alpha1";
            args.Kind = "ClusterTrustBundle";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterTrustBundlePatch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterTrustBundlePatch Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ClusterTrustBundlePatch(name, id, options);
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Certificates.V1Alpha1
{

    public class ClusterTrustBundlePatchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// metadata contains the object metadata.
        /// </summary>
        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Meta.V1.ObjectMetaPatchArgs>? Metadata { get; set; }

        /// <summary>
        /// spec contains the signer (if any) and trust anchors.
        /// </summary>
        [Input("spec")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Certificates.V1Alpha1.ClusterTrustBundleSpecPatchArgs>? Spec { get; set; }

        public ClusterTrustBundlePatchArgs()
        {
        }
        public static new ClusterTrustBundlePatchArgs Empty => new ClusterTrustBundlePatchArgs();
    }
}
