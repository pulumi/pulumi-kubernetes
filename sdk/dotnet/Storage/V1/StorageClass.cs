// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Storage.V1
{
    /// <summary>
    /// StorageClass describes the parameters for a class of storage for which PersistentVolumes can
    /// be dynamically provisioned.
    /// 
    /// StorageClasses are non-namespaced; the name of the storage class according to etcd is in
    /// ObjectMeta.Name.
    /// </summary>
    public partial class StorageClass : KubernetesResource
    {
        /// <summary>
        /// AllowVolumeExpansion shows whether the storage class allow volume expand
        /// </summary>
        [Output("allowVolumeExpansion")]
        public Output<bool> AllowVolumeExpansion { get; private set; } = null!;

        /// <summary>
        /// Restrict the node topologies where volumes can be dynamically provisioned. Each volume
        /// plugin defines its own supported topology specifications. An empty TopologySelectorTerm
        /// list means there is no topology restriction. This field is only honored by servers that
        /// enable the VolumeScheduling feature.
        /// </summary>
        [Output("allowedTopologies")]
        public Output<ImmutableArray<Types.Outputs.Core.V1.TopologySelectorTerm>> AllowedTopologies { get; private set; } = null!;

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers
        /// should convert recognized schemas to the latest internal value, and may reject
        /// unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers
        /// may infer this from the endpoint the client submits requests to. Cannot be updated. In
        /// CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Standard object's metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [Output("metadata")]
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// Dynamically provisioned PersistentVolumes of this storage class are created with these
        /// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if
        /// one is invalid.
        /// </summary>
        [Output("mountOptions")]
        public Output<ImmutableArray<string>> MountOptions { get; private set; } = null!;

        /// <summary>
        /// Parameters holds the parameters for the provisioner that should create volumes of this
        /// storage class.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>> Parameters { get; private set; } = null!;

        /// <summary>
        /// Provisioner indicates the type of the provisioner.
        /// </summary>
        [Output("provisioner")]
        public Output<string> Provisioner { get; private set; } = null!;

        /// <summary>
        /// Dynamically provisioned PersistentVolumes of this storage class are created with this
        /// reclaimPolicy. Defaults to Delete.
        /// </summary>
        [Output("reclaimPolicy")]
        public Output<string> ReclaimPolicy { get; private set; } = null!;

        /// <summary>
        /// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.
        /// When unset, VolumeBindingImmediate is used. This field is only honored by servers that
        /// enable the VolumeScheduling feature.
        /// </summary>
        [Output("volumeBindingMode")]
        public Output<string> VolumeBindingMode { get; private set; } = null!;


        /// <summary>
        /// Create a StorageClass resource with the given unique name, arguments, and options.
        /// </summary>
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageClass(string name, Types.Inputs.Storage.V1.StorageClassArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:storage.k8s.io/v1:StorageClass", name, SetAPIKindAndVersion(args), options)
        {
        }

        internal StorageClass(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:storage.k8s.io/v1:StorageClass", name, dictionary, options)
        {
        }

        private static ResourceArgs SetAPIKindAndVersion(Types.Inputs.Storage.V1.StorageClassArgs? args)
        {
            args ??= new Types.Inputs.Storage.V1.StorageClassArgs();
            args.ApiVersion = "storage.k8s.io/v1";
            args.Kind = "StorageClass";
            return args;
        }

        /// <summary>
        /// Get an existing StorageClass resource's state with the given name and ID.
        /// </summary>
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageClass Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StorageClass(name, default(Types.Inputs.Storage.V1.StorageClassArgs),
                CustomResourceOptions.Merge(options, new CustomResourceOptions {Id = id}));
        }

    }
}
