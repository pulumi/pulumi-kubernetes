// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;


namespace Pulumi.Kubernetes.Storage.V1Beta1 {
    /// <summary>
    /// StorageClass describes the parameters for a class of storage for which PersistentVolumes can
    /// be dynamically provisioned.
    /// 
    /// StorageClasses are non-namespaced; the name of the storage class according to etcd is in
    /// ObjectMeta.Name.
    /// </summary>
    public partial class StorageClass : Pulumi.CustomResource {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should
        /// convert recognized schemas to the latest internal value, and may reject unrecognized values.
        /// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer
        /// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
        /// info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// AllowVolumeExpansion shows whether the storage class allow volume expand
        /// </summary>
        public Output<bool> AllowVolumeExpansion { get; private set; } = null!;

        /// <summary>
        /// Restrict the node topologies where volumes can be dynamically provisioned. Each volume
        /// plugin defines its own supported topology specifications. An empty TopologySelectorTerm
        /// list means there is no topology restriction. This field is only honored by servers that
        /// enable the VolumeScheduling feature.
        /// </summary>
        public Output<Types.Outputs.Core.V1.TopologySelectorTerm[]> AllowedTopologies { get; private set; } = null!;

        /// <summary>
        /// Standard object's metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// Dynamically provisioned PersistentVolumes of this storage class are created with these
        /// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if
        /// one is invalid.
        /// </summary>
        public Output<string[]> MountOptions { get; private set; } = null!;

        /// <summary>
        /// Parameters holds the parameters for the provisioner that should create volumes of this
        /// storage class.
        /// </summary>
        public Output<ImmutableDictionary<string, string>> Parameters { get; private set; } = null!;

        /// <summary>
        /// Provisioner indicates the type of the provisioner.
        /// </summary>
        public Output<string> Provisioner { get; private set; } = null!;

        /// <summary>
        /// Dynamically provisioned PersistentVolumes of this storage class are created with this
        /// reclaimPolicy. Defaults to Delete.
        /// </summary>
        public Output<string> ReclaimPolicy { get; private set; } = null!;

        /// <summary>
        /// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.
        /// When unset, VolumeBindingImmediate is used. This field is only honored by servers that
        /// enable the VolumeScheduling feature.
        /// </summary>
        public Output<string> VolumeBindingMode { get; private set; } = null!;


        /// <summary>
        /// Create a StorageClass resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageClass(string name, Types.Inputs.Storage.V1Beta1.StorageClass args, CustomResourceOptions? options = null)
            : base("kubernetes:storage.k8s.io/v1beta1:StorageClass", name, args, MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

    }
}
