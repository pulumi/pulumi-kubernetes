// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Yaml.V2
{
    /// <summary>
    /// ConfigGroup creates a set of Kubernetes resources from Kubernetes YAML text. The YAML text
    /// may be supplied using any of the following methods:
    /// 
    /// 1. Using a filename or a list of filenames:
    /// 2. Using a file pattern or a list of file patterns:
    /// 3. Using a literal string containing YAML, or a list of such strings:
    /// 4. Any combination of files, patterns, or YAML strings:
    /// 
    /// ## Example Usage
    /// ### Local File
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml.V2;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigGroup("example", new ConfigGroupArgs
    ///         {
    ///             Files = new[] { "foo.yaml" }
    ///         });
    ///     }
    /// }
    /// ```
    /// ### Multiple Local Files
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml.V2;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigGroup("example", new ConfigGroupArgs
    ///         {
    ///             Files = new[] { "foo.yaml", "bar.yaml" }
    ///         });
    ///     }
    /// }
    /// ```
    /// ### Local File Pattern
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml.V2;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigGroup("example", new ConfigGroupArgs
    ///         {
    ///             Files = new[] { "yaml/*.yaml" }
    ///         });
    ///     }
    /// }
    /// ```
    /// ### Multiple Local File Patterns
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml.V2;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigGroup("example", new ConfigGroupArgs
    ///         {
    ///             Files = new[] { "foo/*.yaml", "bar/*.yaml" }
    ///         });
    ///     }
    /// }
    /// ```
    /// ### Literal YAML String
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml.V2;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigGroup("example", new ConfigGroupArgs
    ///         {
    ///             Yaml = @"
    ///             apiVersion: v1
    ///             kind: Namespace
    ///             metadata:
    ///               name: foo
    ///             ",
    ///         });
    ///     }
    /// }
    /// ```
    /// ### YAML with Transformations
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Collections.Immutable;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml.V2;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigGroup("example", new ConfigGroupArgs
    ///         {
    ///             Files = new[] { "foo.yaml" },
    ///             Transformations =
    ///                {
    ///                    LoadBalancerToClusterIP,
    ///                    ResourceAlias,
    ///                    OmitTestPod,
    ///                }
    ///         });
    /// 
    ///         // Make every service private to the cluster, i.e., turn all services into ClusterIP instead of LoadBalancer.
    ///         ImmutableDictionary&lt;string, object&gt; LoadBalancerToClusterIP(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             if ((string)obj["kind"] == "Service" &amp;&amp; (string)obj["apiVersion"] == "v1")
    ///             {
    ///                 var spec = (ImmutableDictionary&lt;string, object&gt;)obj["spec"];
    ///                 if (spec != null &amp;&amp; (string)spec["type"] == "LoadBalancer")
    ///                 {
    ///                     return obj.SetItem("spec", spec.SetItem("type", "ClusterIP"));
    ///                 }
    ///             }
    /// 
    ///             return obj;
    ///         }
    /// 
    ///         // Set a resource alias for a previous name.
    ///         ImmutableDictionary&lt;string, object&gt; ResourceAlias(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             if ((string)obj["kind"] == "Deployment")
    ///             {
    ///                 opts.Aliases.Add(new Alias { Name = "oldName" });
    ///             }
    /// 
    ///             return obj;
    ///         }
    /// 
    ///         // Omit a resource from the Chart by transforming the specified resource definition to an empty List.
    ///         ImmutableDictionary&lt;string, object&gt; OmitTestPod(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             var metadata = (ImmutableDictionary&lt;string, object&gt;)obj["metadata"];
    ///             if ((string)obj["kind"] == "Pod" &amp;&amp; (string)metadata["name"] == "test")
    ///             {
    ///                 return new Dictionary&lt;string, object&gt;
    ///                 {
    ///                     ["apiVersion"] = "v1",
    ///                     ["kind"] = "List",
    ///                     ["items"] = new Dictionary&lt;string, object&gt;(),
    ///                 }.ToImmutableDictionary();
    ///             }
    /// 
    ///             return obj;
    ///         }
    ///     }
    /// }
    /// ```
    /// {% /examples %}}
    /// </summary>
    [KubernetesResourceType("kubernetes:yaml/v2:ConfigGroup")]
    public partial class ConfigGroup : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// Resources created by the ConfigGroup.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<object>> Resources { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigGroup(string name, Pulumi.Kubernetes.Types.Inputs.Yaml.V2.ConfigGroupArgs? args = null, ComponentResourceOptions? options = null)
            : base("kubernetes:yaml/v2:ConfigGroup", name, args ?? new Pulumi.Kubernetes.Types.Inputs.Yaml.V2.ConfigGroupArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Yaml.V2
{

    public class ConfigGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set of paths or a URLs that uniquely identify files.
        /// </summary>
        [Input("files")]
        public InputUnion<string, ImmutableArray<string>>? Files { get; set; }

        /// <summary>
        /// Objects representing Kubernetes resources.
        /// </summary>
        [Input("objs")]
        public InputUnion<object, ImmutableArray<object>>? Objs { get; set; }

        /// <summary>
        /// An optional prefix for the auto-generated resource names. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
        /// </summary>
        [Input("resourcePrefix")]
        public Input<string>? ResourcePrefix { get; set; }

        /// <summary>
        /// Indicates that child resources should skip the await logic.
        /// </summary>
        [Input("skipAwait")]
        public Input<bool>? SkipAwait { get; set; }

        /// <summary>
        /// YAML text containing Kubernetes manifest(s).
        /// </summary>
        [Input("yaml")]
        public InputUnion<string, ImmutableArray<string>>? Yaml { get; set; }

        public ConfigGroupArgs()
        {
        }
        public static new ConfigGroupArgs Empty => new ConfigGroupArgs();
    }
}
