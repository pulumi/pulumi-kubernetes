// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;


namespace Pulumi.Kubernetes.Core.V1 {
    /// <summary>
    /// Event is a report of an event somewhere in the cluster.
    /// </summary>
    public partial class Event : Pulumi.CustomResource {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should
        /// convert recognized schemas to the latest internal value, and may reject unrecognized values.
        /// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer
        /// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
        /// info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// What action was taken/failed regarding to the Regarding object.
        /// </summary>
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// The number of times this event has occurred.
        /// </summary>
        public Output<int> Count { get; private set; } = null!;

        /// <summary>
        /// Time when this Event was first observed.
        /// </summary>
        public Output<string> EventTime { get; private set; } = null!;

        /// <summary>
        /// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
        /// </summary>
        public Output<string> FirstTimestamp { get; private set; } = null!;

        /// <summary>
        /// The object that this event is about.
        /// </summary>
        public Output<Types.Outputs.Core.V1.ObjectReference> InvolvedObject { get; private set; } = null!;

        /// <summary>
        /// The time at which the most recent occurrence of this event was recorded.
        /// </summary>
        public Output<string> LastTimestamp { get; private set; } = null!;

        /// <summary>
        /// A human-readable description of the status of this operation.
        /// </summary>
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// Standard object's metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// This should be a short, machine understandable string that gives the reason for the
        /// transition into the object's current status.
        /// </summary>
        public Output<string> Reason { get; private set; } = null!;

        /// <summary>
        /// Optional secondary object for more complex actions.
        /// </summary>
        public Output<Types.Outputs.Core.V1.ObjectReference> Related { get; private set; } = null!;

        /// <summary>
        /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
        /// </summary>
        public Output<string> ReportingComponent { get; private set; } = null!;

        /// <summary>
        /// ID of the controller instance, e.g. `kubelet-xyzf`.
        /// </summary>
        public Output<string> ReportingInstance { get; private set; } = null!;

        /// <summary>
        /// Data about the Event series this event represents or nil if it's a singleton Event.
        /// </summary>
        public Output<Types.Outputs.Core.V1.EventSeries> Series { get; private set; } = null!;

        /// <summary>
        /// The component reporting this event. Should be a short machine understandable string.
        /// </summary>
        public Output<Types.Outputs.Core.V1.EventSource> Source { get; private set; } = null!;

        /// <summary>
        /// Type of this event (Normal, Warning), new types could be added in the future
        /// </summary>
        public Output<string> Type { get; private set; } = null!;


        
    }
}
