// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

/// <summary>
/// Endpoints is a collection of endpoints that implement the actual service. Example:
///   Name: "mysvc",
///   Subsets: [
///     {
///       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
///       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
///     },
///     {
///       Addresses: [{"ip": "10.10.3.3"}],
///       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
///     },
///  ]
/// </summary>
namespace Pulumi.Kubernetes.Core.V1 {
    public partial class Endpoints : Pulumi.CustomResource {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should
        /// convert recognized schemas to the latest internal value, and may reject unrecognized values.
        /// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer
        /// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
        /// info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Standard object's metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// The set of all endpoints is the union of all subsets. Addresses are placed into subsets
        /// according to the IPs they share. A single address with multiple ports, some of which are
        /// ready and some of which are not (because they come from different containers) will
        /// result in the address being displayed in different subsets for the different ports. No
        /// address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of
        /// addresses and ports that comprise a service.
        /// </summary>
        public Output<Types.Outputs.Core.V1.EndpointSubset[]> Subsets { get; private set; } = null!;


        
    }
}
