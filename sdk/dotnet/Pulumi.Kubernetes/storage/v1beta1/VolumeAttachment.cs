// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

/// <summary>
/// VolumeAttachment captures the intent to attach or detach the specified volume to/from the
/// specified node.
/// 
/// VolumeAttachment objects are non-namespaced.
/// </summary>
namespace Pulumi.Kubernetes.Storage.V1Beta1 {
    public partial class VolumeAttachment : Pulumi.CustomResource {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should
        /// convert recognized schemas to the latest internal value, and may reject unrecognized values.
        /// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer
        /// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
        /// info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Standard object metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public Output<dict> Metadata { get; private set; } = null!;

        /// <summary>
        /// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes
        /// system.
        /// </summary>
        public Output<dict> Spec { get; private set; } = null!;

        /// <summary>
        /// Status of the VolumeAttachment request. Populated by the entity completing the attach or
        /// detach operation, i.e. the external-attacher.
        /// </summary>
        public Output<dict> Status { get; private set; } = null!;


        
    }
}
