// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

/// <summary>
/// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is
/// used to determine which container runtime is used to run all containers in a pod. RuntimeClasses
/// are (currently) manually defined by a user or cluster provisioner, and referenced in the
/// PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running
/// the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
/// </summary>
namespace Pulumi.Kubernetes.Node.V1Beta1 {
    public partial class RuntimeClass : Pulumi.CustomResource {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should
        /// convert recognized schemas to the latest internal value, and may reject unrecognized values.
        /// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer
        /// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
        /// info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Handler specifies the underlying runtime and configuration that the CRI implementation
        /// will use to handle pods of this class. The possible values are specific to the node &
        /// CRI configuration.  It is assumed that all handlers are available on every node, and
        /// handlers of the same name are equivalent on every node. For example, a handler called
        /// "runc" might specify that the runc OCI runtime (using native Linux containers) will be
        /// used to run the containers in a pod. The Handler must conform to the DNS Label (RFC
        /// 1123) requirements, and is immutable.
        /// </summary>
        public Output<string> Handler { get; private set; } = null!;

        /// <summary>
        /// More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// Overhead represents the resource overhead associated with running a pod for a given
        /// RuntimeClass. For more details, see
        /// https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is
        /// alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the
        /// PodOverhead feature.
        /// </summary>
        public Output<Types.Outputs.Node.V1Beta1.Overhead> Overhead { get; private set; } = null!;

        /// <summary>
        /// Scheduling holds the scheduling constraints to ensure that pods running with this
        /// RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this
        /// RuntimeClass is assumed to be supported by all nodes.
        /// </summary>
        public Output<Types.Outputs.Node.V1Beta1.Scheduling> Scheduling { get; private set; } = null!;


        
    }
}
