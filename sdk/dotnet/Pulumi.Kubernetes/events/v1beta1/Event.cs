// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;


namespace Pulumi.Kubernetes.Events.V1Beta1 {
    /// <summary>
    /// Event is a report of an event somewhere in the cluster. It generally denotes some state
    /// change in the system.
    /// </summary>
    public partial class Event : Pulumi.CustomResource {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should
        /// convert recognized schemas to the latest internal value, and may reject unrecognized values.
        /// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        /// </summary>
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer
        /// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More
        /// info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        /// </summary>
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// What action was taken/failed regarding to the regarding object.
        /// </summary>
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1 Event type
        /// </summary>
        public Output<int> DeprecatedCount { get; private set; } = null!;

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1 Event type
        /// </summary>
        public Output<string> DeprecatedFirstTimestamp { get; private set; } = null!;

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1 Event type
        /// </summary>
        public Output<string> DeprecatedLastTimestamp { get; private set; } = null!;

        /// <summary>
        /// Deprecated field assuring backward compatibility with core.v1 Event type
        /// </summary>
        public Output<Types.Outputs.Core.V1.EventSource> DeprecatedSource { get; private set; } = null!;

        /// <summary>
        /// Required. Time when this Event was first observed.
        /// </summary>
        public Output<string> EventTime { get; private set; } = null!;

        
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// Optional. A human-readable description of the status of this operation. Maximal length
        /// of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
        /// </summary>
        public Output<string> Note { get; private set; } = null!;

        /// <summary>
        /// Why the action was taken.
        /// </summary>
        public Output<string> Reason { get; private set; } = null!;

        /// <summary>
        /// The object this Event is about. In most cases it's an Object reporting controller
        /// implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted
        /// because it acts on some changes in a ReplicaSet object.
        /// </summary>
        public Output<Types.Outputs.Core.V1.ObjectReference> Regarding { get; private set; } = null!;

        /// <summary>
        /// Optional secondary object for more complex actions. E.g. when regarding object triggers
        /// a creation or deletion of related object.
        /// </summary>
        public Output<Types.Outputs.Core.V1.ObjectReference> Related { get; private set; } = null!;

        /// <summary>
        /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
        /// </summary>
        public Output<string> ReportingController { get; private set; } = null!;

        /// <summary>
        /// ID of the controller instance, e.g. `kubelet-xyzf`.
        /// </summary>
        public Output<string> ReportingInstance { get; private set; } = null!;

        /// <summary>
        /// Data about the Event series this event represents or nil if it's a singleton Event.
        /// </summary>
        public Output<Types.Outputs.Events.V1Beta1.EventSeries> Series { get; private set; } = null!;

        /// <summary>
        /// Type of this event (Normal, Warning), new types could be added in the future.
        /// </summary>
        public Output<string> Type { get; private set; } = null!;


        
    }
}
