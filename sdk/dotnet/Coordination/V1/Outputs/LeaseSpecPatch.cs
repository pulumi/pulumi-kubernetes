// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Coordination.V1
{

    /// <summary>
    /// LeaseSpec is a specification of a Lease.
    /// </summary>
    [OutputType]
    public sealed class LeaseSpecPatch
    {
        /// <summary>
        /// acquireTime is a time when the current lease was acquired.
        /// </summary>
        public readonly string AcquireTime;
        /// <summary>
        /// holderIdentity contains the identity of the holder of a current lease. If Coordinated Leader Election is used, the holder identity must be equal to the elected LeaseCandidate.metadata.name field.
        /// </summary>
        public readonly string HolderIdentity;
        /// <summary>
        /// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measured against the time of last observed renewTime.
        /// </summary>
        public readonly int LeaseDurationSeconds;
        /// <summary>
        /// leaseTransitions is the number of transitions of a lease between holders.
        /// </summary>
        public readonly int LeaseTransitions;
        /// <summary>
        /// PreferredHolder signals to a lease holder that the lease has a more optimal holder and should be given up. This field can only be set if Strategy is also set.
        /// </summary>
        public readonly string PreferredHolder;
        /// <summary>
        /// renewTime is a time when the current holder of a lease has last updated the lease.
        /// </summary>
        public readonly string RenewTime;
        /// <summary>
        /// Strategy indicates the strategy for picking the leader for coordinated leader election. If the field is not specified, there is no active coordination for this lease. (Alpha) Using this field requires the CoordinatedLeaderElection feature gate to be enabled.
        /// </summary>
        public readonly string Strategy;

        [OutputConstructor]
        private LeaseSpecPatch(
            string acquireTime,

            string holderIdentity,

            int leaseDurationSeconds,

            int leaseTransitions,

            string preferredHolder,

            string renewTime,

            string strategy)
        {
            AcquireTime = acquireTime;
            HolderIdentity = holderIdentity;
            LeaseDurationSeconds = leaseDurationSeconds;
            LeaseTransitions = leaseTransitions;
            PreferredHolder = preferredHolder;
            RenewTime = renewTime;
            Strategy = strategy;
        }
    }
}
