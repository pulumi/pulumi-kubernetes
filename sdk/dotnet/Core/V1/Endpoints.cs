// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Core.V1
{
    /// <summary>
    /// Endpoints is a collection of endpoints that implement the actual service. Example:
    ///   Name: "mysvc",
    ///   Subsets: [
    ///     {
    ///       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
    ///       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
    ///     },
    ///     {
    ///       Addresses: [{"ip": "10.10.3.3"}],
    ///       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
    ///     },
    ///  ]
    /// </summary>
    public partial class Endpoints : KubernetesResource
    {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [Output("metadata")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
        /// </summary>
        [Output("subsets")]
        public Output<ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Core.V1.EndpointSubset>> Subsets { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoints resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoints(string name, Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointsArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:core/v1:Endpoints", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }
        internal Endpoints(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:core/v1:Endpoints", name, new DictionaryResourceArgs(dictionary), MakeResourceOptions(options, ""))
        {
        }

        private Endpoints(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("kubernetes:core/v1:Endpoints", name, null, MakeResourceOptions(options, id))
        {
        }

        private static Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointsArgs? MakeArgs(Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointsArgs? args)
        {
            args ??= new Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointsArgs();
            args.ApiVersion = "v1";
            args.Kind = "Endpoints";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoints resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoints Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Endpoints(name, id, options);
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Core.V1
{

    public class EndpointsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs>? Metadata { get; set; }

        [Input("subsets")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointSubsetArgs>? _subsets;

        /// <summary>
        /// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointSubsetArgs> Subsets
        {
            get => _subsets ?? (_subsets = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.EndpointSubsetArgs>());
            set => _subsets = value;
        }

        public EndpointsArgs()
        {
        }
    }
}
