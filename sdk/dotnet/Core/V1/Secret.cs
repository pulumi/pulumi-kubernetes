// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Core.V1
{
    /// <summary>
    /// Secret holds secret data of a certain type. The total bytes of the values in the Data field
    /// must be less than MaxSecretSize bytes.
    /// 
    /// Note: While Pulumi automatically encrypts the 'data' and 'stringData'
    /// fields, this encryption only applies to Pulumi's context, including the state file, 
    /// the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
    /// and the contents are visible to users with access to the Secret in Kubernetes using
    /// tools like 'kubectl'.
    /// 
    /// For more information on securing Kubernetes Secrets, see the following links:
    /// https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
    /// https://kubernetes.io/docs/concepts/configuration/secret/#risks
    /// </summary>
    public partial class Secret : KubernetesResource
    {
        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object. Servers
        /// should convert recognized schemas to the latest internal value, and may reject
        /// unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        /// <summary>
        /// Data contains the secret data. Each key must consist of alphanumeric characters, '-',
        /// '_' or '.'. The serialized form of the secret data is a base64 encoded string,
        /// representing the arbitrary (possibly non-string) data value here. Described in
        /// https://tools.ietf.org/html/rfc4648#section-4
        /// </summary>
        [Output("data")]
        public Output<ImmutableDictionary<string, string>> Data { get; private set; } = null!;

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents. Servers
        /// may infer this from the endpoint the client submits requests to. Cannot be updated. In
        /// CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Standard object's metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [Output("metadata")]
        public Output<Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// stringData allows specifying non-binary secret data in string form. It is provided as a
        /// write-only convenience method. All keys and values are merged into the data field on
        /// write, overwriting any existing values. It is never output when reading from the API.
        /// </summary>
        [Output("stringData")]
        public Output<ImmutableDictionary<string, string>> StringData { get; private set; } = null!;

        /// <summary>
        /// Used to facilitate programmatic handling of secret data.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Secret resource with the given unique name, arguments, and options.
        /// </summary>
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Secret(string name, Types.Inputs.Core.V1.SecretArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:core/v1:Secret", name, SetAPIKindAndVersion(args), options)
        {
        }

        internal Secret(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:core/v1:Secret", name, dictionary, options)
        {
        }

        private static ResourceArgs SetAPIKindAndVersion(Types.Inputs.Core.V1.SecretArgs? args)
        {
            args ??= new Types.Inputs.Core.V1.SecretArgs();
            args.ApiVersion = "v1";
            args.Kind = "Secret";
            return args;
        }

        /// <summary>
        /// Get an existing Secret resource's state with the given name and ID.
        /// </summary>
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Secret Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Secret(name, default(Types.Inputs.Core.V1.SecretArgs),
                CustomResourceOptions.Merge(options, new CustomResourceOptions {Id = id}));
        }

    }
}
