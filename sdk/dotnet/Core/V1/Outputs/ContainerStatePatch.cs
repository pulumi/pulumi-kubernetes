// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Core.V1
{

    /// <summary>
    /// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
    /// </summary>
    [OutputType]
    public sealed class ContainerStatePatch
    {
        /// <summary>
        /// Details about a running container
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ContainerStateRunningPatch Running;
        /// <summary>
        /// Details about a terminated container
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ContainerStateTerminatedPatch Terminated;
        /// <summary>
        /// Details about a waiting container
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ContainerStateWaitingPatch Waiting;

        [OutputConstructor]
        private ContainerStatePatch(
            Pulumi.Kubernetes.Types.Outputs.Core.V1.ContainerStateRunningPatch running,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ContainerStateTerminatedPatch terminated,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ContainerStateWaitingPatch waiting)
        {
            Running = running;
            Terminated = terminated;
            Waiting = waiting;
        }
    }
}
