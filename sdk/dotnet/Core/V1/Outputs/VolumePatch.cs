// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Core.V1
{

    /// <summary>
    /// Volume represents a named volume in a pod that may be accessed by any container in the pod.
    /// </summary>
    [OutputType]
    public sealed class VolumePatch
    {
        /// <summary>
        /// awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.AWSElasticBlockStoreVolumeSourcePatch AwsElasticBlockStore;
        /// <summary>
        /// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.AzureDiskVolumeSourcePatch AzureDisk;
        /// <summary>
        /// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.AzureFileVolumeSourcePatch AzureFile;
        /// <summary>
        /// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.CephFSVolumeSourcePatch Cephfs;
        /// <summary>
        /// cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.CinderVolumeSourcePatch Cinder;
        /// <summary>
        /// configMap represents a configMap that should populate this volume
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ConfigMapVolumeSourcePatch ConfigMap;
        /// <summary>
        /// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.CSIVolumeSourcePatch Csi;
        /// <summary>
        /// downwardAPI represents downward API about the pod that should populate this volume
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.DownwardAPIVolumeSourcePatch DownwardAPI;
        /// <summary>
        /// emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.EmptyDirVolumeSourcePatch EmptyDir;
        /// <summary>
        /// ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
        /// 
        /// Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
        ///    tracking are needed,
        /// c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
        ///    a PersistentVolumeClaim (see EphemeralVolumeSource for more
        ///    information on the connection between this volume type
        ///    and PersistentVolumeClaim).
        /// 
        /// Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
        /// 
        /// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
        /// 
        /// A pod can use both types of ephemeral volumes and persistent volumes at the same time.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.EphemeralVolumeSourcePatch Ephemeral;
        /// <summary>
        /// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.FCVolumeSourcePatch Fc;
        /// <summary>
        /// flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.FlexVolumeSourcePatch FlexVolume;
        /// <summary>
        /// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.FlockerVolumeSourcePatch Flocker;
        /// <summary>
        /// gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.GCEPersistentDiskVolumeSourcePatch GcePersistentDisk;
        /// <summary>
        /// gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.GitRepoVolumeSourcePatch GitRepo;
        /// <summary>
        /// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.GlusterfsVolumeSourcePatch Glusterfs;
        /// <summary>
        /// hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.HostPathVolumeSourcePatch HostPath;
        /// <summary>
        /// iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ISCSIVolumeSourcePatch Iscsi;
        /// <summary>
        /// name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.NFSVolumeSourcePatch Nfs;
        /// <summary>
        /// persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.PersistentVolumeClaimVolumeSourcePatch PersistentVolumeClaim;
        /// <summary>
        /// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.PhotonPersistentDiskVolumeSourcePatch PhotonPersistentDisk;
        /// <summary>
        /// portworxVolume represents a portworx volume attached and mounted on kubelets host machine
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.PortworxVolumeSourcePatch PortworxVolume;
        /// <summary>
        /// projected items for all in one resources secrets, configmaps, and downward API
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ProjectedVolumeSourcePatch Projected;
        /// <summary>
        /// quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.QuobyteVolumeSourcePatch Quobyte;
        /// <summary>
        /// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.RBDVolumeSourcePatch Rbd;
        /// <summary>
        /// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ScaleIOVolumeSourcePatch ScaleIO;
        /// <summary>
        /// secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.SecretVolumeSourcePatch Secret;
        /// <summary>
        /// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.StorageOSVolumeSourcePatch Storageos;
        /// <summary>
        /// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.VsphereVirtualDiskVolumeSourcePatch VsphereVolume;

        [OutputConstructor]
        private VolumePatch(
            Pulumi.Kubernetes.Types.Outputs.Core.V1.AWSElasticBlockStoreVolumeSourcePatch awsElasticBlockStore,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.AzureDiskVolumeSourcePatch azureDisk,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.AzureFileVolumeSourcePatch azureFile,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.CephFSVolumeSourcePatch cephfs,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.CinderVolumeSourcePatch cinder,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ConfigMapVolumeSourcePatch configMap,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.CSIVolumeSourcePatch csi,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.DownwardAPIVolumeSourcePatch downwardAPI,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.EmptyDirVolumeSourcePatch emptyDir,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.EphemeralVolumeSourcePatch ephemeral,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.FCVolumeSourcePatch fc,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.FlexVolumeSourcePatch flexVolume,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.FlockerVolumeSourcePatch flocker,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.GCEPersistentDiskVolumeSourcePatch gcePersistentDisk,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.GitRepoVolumeSourcePatch gitRepo,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.GlusterfsVolumeSourcePatch glusterfs,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.HostPathVolumeSourcePatch hostPath,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ISCSIVolumeSourcePatch iscsi,

            string name,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.NFSVolumeSourcePatch nfs,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.PersistentVolumeClaimVolumeSourcePatch persistentVolumeClaim,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.PhotonPersistentDiskVolumeSourcePatch photonPersistentDisk,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.PortworxVolumeSourcePatch portworxVolume,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ProjectedVolumeSourcePatch projected,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.QuobyteVolumeSourcePatch quobyte,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.RBDVolumeSourcePatch rbd,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ScaleIOVolumeSourcePatch scaleIO,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.SecretVolumeSourcePatch secret,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.StorageOSVolumeSourcePatch storageos,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.VsphereVirtualDiskVolumeSourcePatch vsphereVolume)
        {
            AwsElasticBlockStore = awsElasticBlockStore;
            AzureDisk = azureDisk;
            AzureFile = azureFile;
            Cephfs = cephfs;
            Cinder = cinder;
            ConfigMap = configMap;
            Csi = csi;
            DownwardAPI = downwardAPI;
            EmptyDir = emptyDir;
            Ephemeral = ephemeral;
            Fc = fc;
            FlexVolume = flexVolume;
            Flocker = flocker;
            GcePersistentDisk = gcePersistentDisk;
            GitRepo = gitRepo;
            Glusterfs = glusterfs;
            HostPath = hostPath;
            Iscsi = iscsi;
            Name = name;
            Nfs = nfs;
            PersistentVolumeClaim = persistentVolumeClaim;
            PhotonPersistentDisk = photonPersistentDisk;
            PortworxVolume = portworxVolume;
            Projected = projected;
            Quobyte = quobyte;
            Rbd = rbd;
            ScaleIO = scaleIO;
            Secret = secret;
            Storageos = storageos;
            VsphereVolume = vsphereVolume;
        }
    }
}
