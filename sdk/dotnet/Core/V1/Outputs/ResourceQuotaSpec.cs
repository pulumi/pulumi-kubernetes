// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Core.V1
{

    [OutputType]
    public sealed class ResourceQuotaSpec
    {
        /// <summary>
        /// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
        /// </summary>
        public readonly ImmutableDictionary<string, string> Hard;
        /// <summary>
        /// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1.ScopeSelector ScopeSelector;
        /// <summary>
        /// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;

        [OutputConstructor]
        private ResourceQuotaSpec(
            ImmutableDictionary<string, string> hard,

            Pulumi.Kubernetes.Types.Outputs.Core.V1.ScopeSelector scopeSelector,

            ImmutableArray<string> scopes)
        {
            Hard = hard;
            ScopeSelector = scopeSelector;
            Scopes = scopes;
        }
    }
}
