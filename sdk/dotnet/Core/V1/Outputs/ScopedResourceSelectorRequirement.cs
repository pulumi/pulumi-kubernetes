// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Core.V1
{

    /// <summary>
    /// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
    /// </summary>
    [OutputType]
    public sealed class ScopedResourceSelectorRequirement
    {
        /// <summary>
        /// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
        /// 
        /// Possible enum values:
        ///  - `"DoesNotExist"`
        ///  - `"Exists"`
        ///  - `"In"`
        ///  - `"NotIn"`
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// The name of the scope that the selector applies to.
        /// 
        /// Possible enum values:
        ///  - `"BestEffort"` Match all pod objects that have best effort quality of service
        ///  - `"CrossNamespacePodAffinity"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned. This is a beta feature enabled by the PodAffinityNamespaceSelector feature flag.
        ///  - `"NotBestEffort"` Match all pod objects that do not have best effort quality of service
        ///  - `"NotTerminating"` Match all pod objects where spec.activeDeadlineSeconds is nil
        ///  - `"PriorityClass"` Match all pod objects that have priority class mentioned
        ///  - `"Terminating"` Match all pod objects where spec.activeDeadlineSeconds &gt;=0
        /// </summary>
        public readonly string ScopeName;
        /// <summary>
        /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private ScopedResourceSelectorRequirement(
            string @operator,

            string scopeName,

            ImmutableArray<string> values)
        {
            Operator = @operator;
            ScopeName = scopeName;
            Values = values;
        }
    }
}
