// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Core.V1
{

    /// <summary>
    /// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
    /// </summary>
    public class PersistentVolumeClaimStatusArgs : Pulumi.ResourceArgs
    {
        [Input("accessModes")]
        private InputList<string>? _accessModes;

        /// <summary>
        /// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        public InputList<string> AccessModes
        {
            get => _accessModes ?? (_accessModes = new InputList<string>());
            set => _accessModes = value;
        }

        [Input("capacity")]
        private InputMap<string>? _capacity;

        /// <summary>
        /// Represents the actual resources of the underlying volume.
        /// </summary>
        public InputMap<string> Capacity
        {
            get => _capacity ?? (_capacity = new InputMap<string>());
            set => _capacity = value;
        }

        [Input("conditions")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.PersistentVolumeClaimConditionArgs>? _conditions;

        /// <summary>
        /// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.PersistentVolumeClaimConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Pulumi.Kubernetes.Types.Inputs.Core.V1.PersistentVolumeClaimConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Phase represents the current phase of PersistentVolumeClaim.
        /// </summary>
        [Input("phase")]
        public Input<string>? Phase { get; set; }

        public PersistentVolumeClaimStatusArgs()
        {
        }
    }
}
