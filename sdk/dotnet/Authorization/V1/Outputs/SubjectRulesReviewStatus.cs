// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Authorization.V1
{

    [OutputType]
    public sealed class SubjectRulesReviewStatus
    {
        /// <summary>
        /// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
        /// </summary>
        public readonly string EvaluationError;
        /// <summary>
        /// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
        /// </summary>
        public readonly bool Incomplete;
        /// <summary>
        /// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Authorization.V1.NonResourceRule> NonResourceRules;
        /// <summary>
        /// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Authorization.V1.ResourceRule> ResourceRules;

        [OutputConstructor]
        private SubjectRulesReviewStatus(
            string evaluationError,

            bool incomplete,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Authorization.V1.NonResourceRule> nonResourceRules,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Authorization.V1.ResourceRule> resourceRules)
        {
            EvaluationError = evaluationError;
            Incomplete = incomplete;
            NonResourceRules = nonResourceRules;
            ResourceRules = resourceRules;
        }
    }
}
