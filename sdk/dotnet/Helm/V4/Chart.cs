// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Helm.V4
{
    /// <summary>
    /// Chart is a component representing a collection of resources described by a Helm Chart.
    /// Helm charts are a popular packaging format for Kubernetes applications, and published
    /// to registries such as [Artifact Hub](https://artifacthub.io/packages/search?kind=0&amp;sort=relevance&amp;page=1).
    /// 
    /// Chart does not use Tiller or create a Helm Release; the semantics are equivalent to
    /// running `helm template --dry-run=server` and then using Pulumi to deploy the resulting YAML manifests.
    /// This allows you to apply [Pulumi Transformations](https://www.pulumi.com/docs/concepts/options/transformations/) and
    /// [Pulumi Policies](https://www.pulumi.com/docs/using-pulumi/crossguard/) to the Kubernetes resources.
    /// 
    /// You may also want to consider the `Release` resource as an alternative method for managing helm charts. For more
    /// information about the trade-offs between these options, see: [Choosing the right Helm resource for your use case](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/choosing-the-right-helm-resource-for-your-use-case).
    /// 
    /// ### Chart Resolution
    /// 
    /// The Helm Chart can be fetched from any source that is accessible to the `helm` command line.
    /// The following variations are supported:
    /// 
    /// 1. By chart reference with repo prefix: `chart: "example/mariadb"`
    /// 2. By path to a packaged chart: `chart: "./nginx-1.2.3.tgz"`
    /// 3. By path to an unpacked chart directory: `chart: "./nginx"`
    /// 4. By absolute URL: `chart: "https://example.com/charts/nginx-1.2.3.tgz"`
    /// 5. By chart reference with repo URL: `chart: "nginx", repositoryOpts: { repo: "https://example.com/charts/" }`
    /// 6. By OCI registry: `chart: "oci://example.com/charts/nginx", version: "1.2.3"`
    /// 
    /// A chart reference is a convenient way of referencing a chart in a chart repository.
    /// 
    /// When you use a chart reference with a repo prefix (`example/mariadb`), Pulumi will look in Helm's local configuration
    /// for a chart repository named `example`, and will then look for a chart in that repository whose name is `mariadb`.
    /// It will install the latest stable version of that chart, unless you specify `devel` to also include
    /// development versions (alpha, beta, and release candidate releases), or supply a version number with `version`.
    /// 
    /// Use the `verify` and optional `keyring` inputs to enable Chart verification.
    /// By default, Pulumi uses the keyring at `$HOME/.gnupg/pubring.gpg`. See: [Helm Provenance and Integrity](https://helm.sh/docs/topics/provenance/).
    /// 
    /// ### Chart Values
    /// 
    /// [Values files](https://helm.sh/docs/chart_template_guide/values_files/#helm) (`values.yaml`) may be supplied
    /// with the `valueYamlFiles` input, accepting [Pulumi Assets](https://www.pulumi.com/docs/concepts/assets-archives/#assets).
    /// 
    /// A map of chart values may also be supplied with the `values` input, with highest precedence. You're able to use literals,
    /// nested maps, [Pulumi outputs](https://www.pulumi.com/docs/concepts/inputs-outputs/), and Pulumi assets as values.
    /// Assets are automatically opened and converted to a string.
    /// 
    /// Note that the use of expressions (e.g. `--set service.type`) is not supported.
    /// 
    /// ### Chart Dependency Resolution
    /// 
    /// For unpacked chart directories, Pulumi automatically rebuilds the dependencies if dependencies are missing
    /// and a `Chart.lock` file is present (see: [Helm Dependency Build](https://helm.sh/docs/helm/helm_dependency_build/)).
    /// Use the `dependencyUpdate` input to have Pulumi update the dependencies (see: [Helm Dependency Update](https://helm.sh/docs/helm/helm_dependency_update/)).
    /// 
    /// ### Templating
    /// 
    /// The `Chart` resource renders the templates from your chart and then manages the resources directly with the
    /// Pulumi Kubernetes provider. A default namespace is applied based on the `namespace` input, the provider's
    /// configured namespace, and the active Kubernetes context. Use the `skipCrds` option to skip installing the
    /// Custom Resource Definition (CRD) objects located in the chart's `crds/` special directory.
    /// 
    /// Use the `postRenderer` input to pipe the rendered manifest through a [post-rendering command](https://helm.sh/docs/topics/advanced/#post-rendering).
    /// 
    /// ### Resource Ordering
    /// 
    /// Sometimes resources must be applied in a specific order. For example, a namespace resource must be
    /// created before any namespaced resources, or a Custom Resource Definition (CRD) must be pre-installed.
    /// 
    /// Pulumi uses heuristics to determine which order to apply and delete objects within the Chart.  Pulumi also
    /// waits for each object to be fully reconciled, unless `skipAwait` is enabled.
    /// 
    /// Pulumi supports the `config.kubernetes.io/depends-on` annotation to declare an explicit dependency on a given resource.
    /// The annotation accepts a list of resource references, delimited by commas.
    /// 
    /// Note that references to resources outside the Chart aren't supported.
    /// 
    /// **Resource reference**
    /// 
    /// A resource reference is a string that uniquely identifies a resource.
    /// 
    /// It consists of the group, kind, name, and optionally the namespace, delimited by forward slashes.
    /// 
    /// | Resource Scope   | Format                                         |
    /// | :--------------- | :--------------------------------------------- |
    /// | namespace-scoped | `&lt;group&gt;/namespaces/&lt;namespace&gt;/&lt;kind&gt;/&lt;name&gt;` |
    /// | cluster-scoped   | `&lt;group&gt;/&lt;kind&gt;/&lt;name&gt;`                        |
    /// 
    /// For resources in the “core” group, the empty string is used instead (for example: `/namespaces/test/Pod/pod-a`).
    /// 
    /// ## Example Usage
    /// ### Local Chart Directory
    /// ```csharp
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Types.Inputs.Helm.V4;
    /// using System.Collections.Generic;
    /// 
    /// return await Deployment.RunAsync(() =&gt;
    /// {
    ///     new Pulumi.Kubernetes.Helm.V4.Chart("nginx", new ChartArgs
    ///     {
    ///         Chart = "./nginx"
    ///     });
    ///     return new Dictionary&lt;string, object?&gt;{};
    /// });
    /// ```
    /// ### Repository Chart
    /// ```csharp
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Types.Inputs.Helm.V4;
    /// using System.Collections.Generic;
    /// 
    /// return await Deployment.RunAsync(() =&gt;
    /// {
    ///     new Pulumi.Kubernetes.Helm.V4.Chart("nginx", new ChartArgs
    ///     {
    ///         Chart = "nginx",
    ///         RepositoryOpts = new RepositoryOptsArgs
    ///         {
    ///             Repo = "https://charts.bitnami.com/bitnami"
    ///         },
    ///     });
    ///     
    ///     return new Dictionary&lt;string, object?&gt;{};
    /// });
    /// ```
    /// ### OCI Chart
    /// ```csharp
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Types.Inputs.Helm.V4;
    /// using System.Collections.Generic;
    /// 
    /// return await Deployment.RunAsync(() =&gt;
    /// {
    ///     new Pulumi.Kubernetes.Helm.V4.Chart("nginx", new ChartArgs
    ///     {
    ///         Chart = "oci://registry-1.docker.io/bitnamicharts/nginx",
    ///         Version = "16.0.7",
    ///     });
    ///     
    ///     return new Dictionary&lt;string, object?&gt;{};
    /// });
    /// ```
    /// ### Chart Values
    /// ```csharp
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Types.Inputs.Helm.V4;
    /// using System.Collections.Generic;
    /// 
    /// return await Deployment.RunAsync(() =&gt;
    /// {
    ///     new Pulumi.Kubernetes.Helm.V4.Chart("nginx", new ChartArgs
    ///     {
    ///         Chart = "nginx",
    ///         RepositoryOpts = new RepositoryOptsArgs
    ///         {
    ///             Repo = "https://charts.bitnami.com/bitnami"
    ///         },
    ///         ValueYamlFiles = 
    ///         {
    ///             new FileAsset("./values.yaml") 
    ///         },
    ///         Values = new InputMap&lt;object&gt;
    ///         {
    ///             ["service"] = new InputMap&lt;object&gt;
    ///             {
    ///                 ["type"] = "ClusterIP",
    ///             },
    ///             ["notes"] = new FileAsset("./notes.txt")
    ///         },
    ///     });
    ///     
    ///     return new Dictionary&lt;string, object?&gt;{};
    /// });
    /// ```
    /// ### Chart Namespace
    /// ```csharp
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Types.Inputs.Core.V1;
    /// using Pulumi.Kubernetes.Types.Inputs.Meta.V1;
    /// using Pulumi.Kubernetes.Types.Inputs.Helm.V4;
    /// using System.Collections.Generic;
    /// 
    /// return await Deployment.RunAsync(() =&gt;
    /// {
    ///     var ns = new Pulumi.Kubernetes.Core.V1.Namespace("nginx", new NamespaceArgs
    ///     {
    ///         Metadata = new ObjectMetaArgs{Name = "nginx"}
    ///     });
    ///     new Pulumi.Kubernetes.Helm.V4.Chart("nginx", new ChartArgs
    ///     {
    ///         Namespace = ns.Metadata.Apply(m =&gt; m.Name),
    ///         Chart = "nginx",
    ///         RepositoryOpts = new RepositoryOptsArgs
    ///         {
    ///             Repo = "https://charts.bitnami.com/bitnami"
    ///         },
    ///     });
    ///     
    ///     return new Dictionary&lt;string, object?&gt;{};
    /// });
    /// ```
    /// </summary>
    [KubernetesResourceType("kubernetes:helm.sh/v4:Chart")]
    public partial class Chart : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// Resources created by the Chart.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<object>> Resources { get; private set; } = null!;


        /// <summary>
        /// Create a Chart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Chart(string name, Pulumi.Kubernetes.Types.Inputs.Helm.V4.ChartArgs? args = null, ComponentResourceOptions? options = null)
            : base("kubernetes:helm.sh/v4:Chart", name, args ?? new Pulumi.Kubernetes.Types.Inputs.Helm.V4.ChartArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Helm.V4
{

    public class ChartArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Chart name to be installed. A path may be used.
        /// </summary>
        [Input("chart", required: true)]
        public Input<string> Chart { get; set; } = null!;

        /// <summary>
        /// Run helm dependency update before installing the chart.
        /// </summary>
        [Input("dependencyUpdate")]
        public Input<bool>? DependencyUpdate { get; set; }

        /// <summary>
        /// Use chart development versions, too. Equivalent to version '&gt;0.0.0-0'. If `version` is set, this is ignored.
        /// </summary>
        [Input("devel")]
        public Input<bool>? Devel { get; set; }

        /// <summary>
        /// Location of public keys used for verification. Used only if `verify` is true
        /// </summary>
        [Input("keyring")]
        public Input<AssetOrArchive>? Keyring { get; set; }

        /// <summary>
        /// Release name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Namespace for the release.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specification defining the post-renderer to use.
        /// </summary>
        [Input("postRenderer")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Helm.V4.PostRendererArgs>? PostRenderer { get; set; }

        /// <summary>
        /// Specification defining the Helm chart repository to use.
        /// </summary>
        [Input("repositoryOpts")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Helm.V4.RepositoryOptsArgs>? RepositoryOpts { get; set; }

        /// <summary>
        /// An optional prefix for the auto-generated resource names. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo:resourceName".
        /// </summary>
        [Input("resourcePrefix")]
        public Input<string>? ResourcePrefix { get; set; }

        /// <summary>
        /// By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
        /// </summary>
        [Input("skipAwait")]
        public Input<bool>? SkipAwait { get; set; }

        /// <summary>
        /// If set, no CRDs will be installed. By default, CRDs are installed if not already present.
        /// </summary>
        [Input("skipCrds")]
        public Input<bool>? SkipCrds { get; set; }

        [Input("valueYamlFiles")]
        private InputList<AssetOrArchive>? _valueYamlFiles;

        /// <summary>
        /// List of assets (raw yaml files). Content is read and merged with values.
        /// </summary>
        public InputList<AssetOrArchive> ValueYamlFiles
        {
            get => _valueYamlFiles ?? (_valueYamlFiles = new InputList<AssetOrArchive>());
            set => _valueYamlFiles = value;
        }

        [Input("values")]
        private InputMap<object>? _values;

        /// <summary>
        /// Custom values set for the release.
        /// </summary>
        public InputMap<object> Values
        {
            get => _values ?? (_values = new InputMap<object>());
            set => _values = value;
        }

        /// <summary>
        /// Verify the chart's integrity.
        /// </summary>
        [Input("verify")]
        public Input<bool>? Verify { get; set; }

        /// <summary>
        /// Specify the chart version to install. If this is not specified, the latest version is installed.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ChartArgs()
        {
        }
        public static new ChartArgs Empty => new ChartArgs();
    }
}
