// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

namespace Pulumi.Kubernetes.Helm.V2
{
    /// <summary>
    /// Chart is a component representing a collection of resources described by an arbitrary Helm
    /// Chart. The Chart can be fetched from any source that is accessible to the `helm` command
    /// line. Values in the `values.yml` file can be overridden using
    /// <see cref="BaseChartArgsUnwrap.Values" /> (equivalent to `--set` or having multiple
    /// `values.yml` files). Objects can be transformed arbitrarily by supplying callbacks to
    /// <see cref="BaseChartArgsUnwrap.Transformations" />.
    /// <para />
    /// <see cref="Chart"/> does not use Tiller. The Chart specified is copied and expanded locally;
    /// the semantics are equivalent to running `helm template` and then using Pulumi to manage the
    /// resulting YAML manifests. Any values that would be retrieved in-cluster are assigned fake
    /// values, and none of Tiller's server-side validity testing is executed.
    /// 
    /// ## Example Usage
    /// ### Local Chart Directory
    /// 
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Helm;
    /// using Pulumi.Kubernetes.Helm.V2;
    /// 
    /// class HelmStack : Stack
    /// {
    ///     public HelmStack()
    ///     {
    ///         var nginx = new Chart("nginx-ingress", new LocalChartArgs
    ///         {
    ///             Path = "./nginx-ingress",
    ///         });
    /// 
    ///     }
    /// }
    /// ```
    /// ### Remote Chart
    /// 
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Helm;
    /// using Pulumi.Kubernetes.Helm.V2;
    /// 
    /// class HelmStack : Stack
    /// {
    ///     public HelmStack()
    ///     {
    ///         var nginx = new Chart("nginx-ingress", new ChartArgs
    ///         {
    ///             Chart = "nginx-ingress",
    ///             Version = "1.24.4",
    ///             FetchOptions = new ChartFetchArgs
    ///             {
    ///                 Repo = "https://kubernetes-charts.storage.googleapis.com/"
    ///             }
    ///         });
    /// 
    ///     }
    /// }
    /// ```
    /// ### Set Chart Values
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Helm;
    /// using Pulumi.Kubernetes.Helm.V2;
    /// 
    /// class HelmStack : Stack
    /// {
    ///     public HelmStack()
    ///     {
    ///         var values = new Dictionary&lt;string, object&gt;
    ///         {
    ///             ["controller"] = new Dictionary&lt;string, object&gt;
    ///             {
    ///                 ["metrics"] = new Dictionary&lt;string, object&gt;
    ///                 {
    ///                     ["enabled"] = true
    ///                 }
    ///             },
    ///         };
    /// 
    ///         var nginx = new Chart("nginx-ingress", new ChartArgs
    ///         {
    ///             Chart = "nginx-ingress",
    ///             Version = "1.24.4",
    ///             FetchOptions = new ChartFetchArgs
    ///             {
    ///                 Repo = "https://kubernetes-charts.storage.googleapis.com/"
    ///             },
    ///             Values = values,
    ///         });
    /// 
    ///     }
    /// }
    /// ```
    /// ### Deploy Chart into Namespace
    /// 
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Helm;
    /// using Pulumi.Kubernetes.Helm.V2;
    /// 
    /// class HelmStack : Stack
    /// {
    ///     public HelmStack()
    ///     {
    ///         var nginx = new Chart("nginx-ingress", new ChartArgs
    ///         {
    ///             Chart = "nginx-ingress",
    ///             Version = "1.24.4",
    ///             Namespace = "test-namespace",
    ///             FetchOptions = new ChartFetchArgs
    ///             {
    ///                 Repo = "https://kubernetes-charts.storage.googleapis.com/"
    ///             },
    ///         });
    /// 
    ///     }
    /// }
    /// ```
    /// ### Chart with Transformations
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Collections.Immutable;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Helm;
    /// using Pulumi.Kubernetes.Helm.V2;
    /// 
    /// class HelmStack : Stack
    /// {
    ///     public HelmStack()
    ///     {
    ///         var nginx = new Chart("nginx-ingress", new ChartArgs
    ///         {
    ///             Chart = "nginx-ingress",
    ///             Version = "1.24.4",
    ///             FetchOptions = new ChartFetchArgs
    ///             {
    ///                 Repo = "https://kubernetes-charts.storage.googleapis.com/"
    ///             },
    ///             Transformations =
    ///             {
    ///                 LoadBalancerToClusterIP,
    ///                 ResourceAlias,
    ///                 OmitTestPod,
    ///             }
    /// 
    ///         });
    /// 
    ///         // Make every service private to the cluster, i.e., turn all services into ClusterIP instead of LoadBalancer.
    ///         ImmutableDictionary&lt;string, object&gt; LoadBalancerToClusterIP(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             if ((string)obj["kind"] == "Service" &amp;&amp; (string)obj["apiVersion"] == "v1")
    ///             {
    ///                 var spec = (ImmutableDictionary&lt;string, object&gt;)obj["spec"];
    ///                 if (spec != null &amp;&amp; (string)spec["type"] == "LoadBalancer")
    ///                 {
    ///                     return obj.SetItem("spec", spec.SetItem("type", "ClusterIP"));
    ///                 }
    ///             }
    /// 
    ///             return obj;
    ///         }
    /// 
    ///         // Set a resource alias for a previous name.
    ///         ImmutableDictionary&lt;string, object&gt; ResourceAlias(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             if ((string)obj["kind"] == "Deployment")
    ///             {
    ///                 opts.Aliases.Add(new Alias { Name = "oldName" });
    ///             }
    /// 
    ///             return obj;
    ///         }
    /// 
    ///         // Omit a resource from the Chart by transforming the specified resource definition to an empty List.
    ///         ImmutableDictionary&lt;string, object&gt; OmitTestPod(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             var metadata = (ImmutableDictionary&lt;string, object&gt;)obj["metadata"];
    ///             if ((string)obj["kind"] == "Pod" &amp;&amp; (string)metadata["name"] == "test")
    ///             {
    ///                 return new Dictionary&lt;string, object&gt;
    ///                 {
    ///                     ["apiVersion"] = "v1",
    ///                     ["kind"] = "List",
    ///                     ["items"] = new Dictionary&lt;string, object&gt;(),
    ///                 }.ToImmutableDictionary();
    ///             }
    /// 
    ///             return obj;
    ///         }
    ///     }
    /// }
    /// ```
    /// </summary>
    public sealed class Chart : ChartBase
    {
        /// <summary>
        /// Create a Chart resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="releaseName">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Chart(string releaseName, Union<ChartArgs, LocalChartArgs> args, ComponentResourceOptions? options = null)
            : base(releaseName, args, options)
        {
        }
    }
}
