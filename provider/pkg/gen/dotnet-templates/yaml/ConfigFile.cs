// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.IO;

namespace Pulumi.Kubernetes.Yaml
{
    /// <summary>
    /// Defines a set of Kubernetes resources from a Kubernetes YAML file. 
    /// 
    /// ## Example Usage
    /// ### Local File
    /// 
    /// ```csharp
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigFile("example", new ConfigFileArgs
    ///         {
    ///             File = "foo.yaml",
    ///         });
    ///     }
    /// }
    /// ```
    /// ### YAML with Transformations
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Collections.Immutable;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Pulumi.Kubernetes.Yaml;
    /// 
    /// class YamlStack : Stack
    /// {
    ///     public YamlStack()
    ///     {
    ///         var helloWorld = new ConfigFile("example", new ConfigFileArgs
    ///         {
    ///             File = "foo.yaml",
    ///             Transformations =
    ///                {
    ///                    LoadBalancerToClusterIP,
    ///                    ResourceAlias,
    ///                    OmitTestPod,
    ///                }
    ///         });
    /// 
    ///         // Make every service private to the cluster, i.e., turn all services into ClusterIP instead of LoadBalancer.
    ///         ImmutableDictionary&lt;string, object&gt; LoadBalancerToClusterIP(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             if ((string)obj["kind"] == "Service" &amp;&amp; (string)obj["apiVersion"] == "v1")
    ///             {
    ///                 var spec = (ImmutableDictionary&lt;string, object&gt;)obj["spec"];
    ///                 if (spec != null &amp;&amp; (string)spec["type"] == "LoadBalancer")
    ///                 {
    ///                     return obj.SetItem("spec", spec.SetItem("type", "ClusterIP"));
    ///                 }
    ///             }
    /// 
    ///             return obj;
    ///         }
    /// 
    ///         // Set a resource alias for a previous name.
    ///         ImmutableDictionary&lt;string, object&gt; ResourceAlias(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             if ((string)obj["kind"] == "Deployment")
    ///             {
    ///                 opts.Aliases = new List&lt;Input&lt;Alias&gt;&gt; { new Alias { Name = "oldName" } };
    ///             }
    /// 
    ///             return obj;
    ///         }
    /// 
    ///         // Omit a resource from the Chart by transforming the specified resource definition to an empty List.
    ///         ImmutableDictionary&lt;string, object&gt; OmitTestPod(ImmutableDictionary&lt;string, object&gt; obj, CustomResourceOptions opts)
    ///         {
    ///             var metadata = (ImmutableDictionary&lt;string, object&gt;)obj["metadata"];
    ///             if ((string)obj["kind"] == "Pod" &amp;&amp; (string)metadata["name"] == "test")
    ///             {
    ///                 return new Dictionary&lt;string, object&gt;
    ///                 {
    ///                     ["apiVersion"] = "v1",
    ///                     ["kind"] = "List",
    ///                     ["items"] = new Dictionary&lt;string, object&gt;(),
    ///                 }.ToImmutableDictionary();
    ///             }
    /// 
    ///             return obj;
    ///         }
    ///     }
    /// }
    /// ```
    /// </summary>
    public sealed class ConfigFile : CollectionComponentResource
    {
        /// <summary>
        /// Create a ConfigFile resource with the given unique name, arguments, and options.
        /// </summary>
        /// <param name="name">Component name. If `args` is not specified, also treated as the file name.</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigFile(string name, ConfigFileArgs? args = null, ComponentResourceOptions? options = null)
            : this(name, args, options, options?.Parent)
        {
        }

        internal ConfigFile(string name, ConfigFileArgs? args = null, ComponentResourceOptions? options = null, Pulumi.Resource? aliasParent = null)
            : base("kubernetes:yaml:ConfigFile", MakeName(args, name), options)
        {
            name = MakeName(args, name);
            var childOpts = GetChildOptions(this, null, options);
            // https://github.com/pulumi/pulumi-kubernetes/issues/1214
            if (aliasParent is not null) {
                childOpts.ResourceTransformations ??= new List<ResourceTransformation>();
                childOpts.ResourceTransformations.Add(Aliased(this, aliasParent));
            }
            var invokeOpts = GetInvokeOptions(childOpts);

			var transformations = args?.Transformations ?? new List<TransformationAction>();
			if (args?.SkipAwait == true)
			{
				transformations.Add(Parser.SkipAwait);
			}
            var fileOutput = args?.File.ToOutput() ?? Output.Create(name);
            var resources = fileOutput.Apply(fileId =>
            {
                try
                {
                    if (Parser.IsUrl(fileId))
                    {
                        using var wc = new System.Net.WebClient();
                        return wc.DownloadString(fileId);
                    }

                    return File.ReadAllText(fileId);
                }
                catch (Exception e)
                {
                    throw new ResourceException($"Error fetching YAML file '{fileId}': {e.Message}", this);
                }
            }).Apply(text =>
                Parser.ParseYamlDocument(new ParseArgs
                {
                    Objs = Invokes.YamlDecode(new YamlDecodeArgs { Text = text }, invokeOpts),
                    Transformations = transformations,
                    ResourcePrefix = args?.ResourcePrefix
                }, childOpts));

            RegisterResources(resources);
        }

        internal static string MakeName(ConfigFileArgs? args, string name)
            => args?.ResourcePrefix != null ? $"{args.ResourcePrefix}-{name}" : name;
    }

    /// <summary>
    /// Resource arguments for <see cref="ConfigFile"/>.
    /// </summary>
    public class ConfigFileArgs : ResourceArgs
    {
        /// <summary>
        /// Path or a URL that uniquely identifies a file.
        /// </summary>
        public Input<string>? File { get; set; }

        private List<TransformationAction>? _transformations;

        /// <summary>
        /// An optional list of transformations to apply to Kubernetes resource definitions before registering
        /// with engine.
        /// </summary>
        public List<TransformationAction> Transformations
        {
            get => _transformations ??= new List<TransformationAction>();
            set => _transformations = value;
        }

        /// <summary>
        /// An optional prefix for the auto-generated resource names.
        /// Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
        /// </summary>
        public string? ResourcePrefix { get; set; }

        /// <summary>
        /// Skip await logic for all resources in this YAML. Resources will be marked ready as soon as they are created.
        /// Warning: This option should not be used if you have resources depending on Outputs from the YAML.
        /// </summary>
        public bool? SkipAwait { get; set; }
    }
}
