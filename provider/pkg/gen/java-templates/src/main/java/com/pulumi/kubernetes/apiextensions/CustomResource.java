// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.apiextensions;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.annotation.Nullable;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.core.internal.Internal;
import com.pulumi.core.internal.OutputInternal;
import com.pulumi.core.internal.annotations.ImportMetadata;
import com.pulumi.kubernetes.Utilities;
import com.pulumi.kubernetes.meta.v1.outputs.ObjectMeta;
import com.pulumi.resources.ResourceArgs;

import net.bytebuddy.ByteBuddy;
import net.bytebuddy.description.annotation.AnnotationDescription;
import net.bytebuddy.implementation.FieldAccessor;
import net.bytebuddy.implementation.Implementation;
import net.bytebuddy.implementation.MethodCall;

/**
 * CustomResource represents an instance of a CustomResourceDefinition (CRD). For example, the
 * CoreOS Prometheus operator exposes a CRD `monitoring.coreos.com/ServiceMonitor`; to
 * instantiate this as a Pulumi resource, one could call `new CustomResource`, passing the
 * `ServiceMonitor` resource definition as an argument.
 */
@ResourceType(type="kubernetes:apiextensions:CustomResource")
public class CustomResource extends com.pulumi.resources.CustomResource {
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * 
     */
    @Export(name="apiVersion", refs={String.class}, tree="[0]")
    private Output<String> apiVersion;

    /**
     * @return APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * 
     */
    public Output<String> apiVersion() {
        return this.apiVersion;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * Standard object&#39;s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     * 
     */
    @Export(name="metadata", refs={ObjectMeta.class}, tree="[0]")
    private Output<ObjectMeta> metadata;

    /**
     * @return Standard object&#39;s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     * 
     */
    public Output<ObjectMeta> metadata() {
        return this.metadata;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CustomResource(String name) {
        this(name, CustomResourceArgs.Empty);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CustomResource(String name, @Nullable CustomResourceArgsBase args) {
        this(name, args, null);
    }
    
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CustomResource(String name, @Nullable CustomResourceArgsBase args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super(makeType(args), name, makeArgs(args), makeResourceOptions(options, Codegen.empty()));
    }

    // private CustomResource(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
    //     super(makeType(args), name, null, makeResourceOptions(options, id));
    // }

    private static String makeType(@Nullable CustomResourceArgsBase args) {
        String apiVersion = args.apiVersion().map(Internal::of).map(CustomResource::getOutputValue).orElse("");
        String kind = args.kind().map(Internal::of).map(CustomResource::getOutputValue).orElse("");
        return String.format("kubernetes:%s:%s", apiVersion, kind);
    }

    private static String getOutputValue(OutputInternal<String> o) {
        try {
            return o.getValueOrDefault("").get();
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException(e);
        }
    }

    private static class Field {
        public Optional<?> value;
        public Either<Annotation,AnnotationDescription> importAnnotation;

        public Field(Optional<?> value, Either<Annotation,AnnotationDescription> importAnnotation) {
            this.value = value;
            this.importAnnotation = importAnnotation;
        }
    }

    private static ResourceArgs makeArgs(@Nullable CustomResourceArgsBase args) {
        if (args == null) {
            return null;
        }

        // collect the input properties from the annotated fields of the user-supplied args,
        // plus the dynamic input properties within otherFields.
        var importFields = 
            ImportMetadata.of(args.getClass()).values().stream()
            .map(info -> new Field(info.getFieldOutput(args), Either.ofLeft(info.getAnnotation())));
        var otherFields = 
            args.otherFields().orElseGet(Map::of).entrySet().stream()
            .map(entry -> new Field(Optional.ofNullable(entry.getValue()), Either.ofRight(
                AnnotationDescription.Builder.ofType(Import.class).define("name", entry.getKey()).build())));
        List<Field> fields = 
            Stream.concat(importFields, otherFields)
            .collect(Collectors.toList());

        try {
            // define a dynamic subclass of ResourceArgs with a field for each input property
            // and a constructor that takes the property values and assigns them to the fields.
            var t = new ByteBuddy().subclass(ResourceArgs.class); 
            Implementation.Composable c = MethodCall.invoke(ResourceArgs.class.getConstructor());

            var paramTypes = new ArrayList<Class<?>>();
            var paramValues = new ArrayList<Object>();

            for (var arg : fields) {
                // define a field of type Output with @Import(name="foo")
                var fieldName = String.format("f%d", paramTypes.size());
                var f = t.defineField(fieldName, Output.class, Modifier.PUBLIC);
                t = arg.importAnnotation.either(a -> f.annotateField(a), ad -> f.annotateField(ad));

                // bind the field to the corresponding constructor parameter
                c = c.andThen(FieldAccessor.ofField(fieldName).setsArgumentAt(paramTypes.size()));

                paramTypes.add(Output.class);
                paramValues.add(arg.value.map(v -> v instanceof Output ? v : Output.ofNullable(v)).orElse(null));
            }

            return (ResourceArgs) t
                    .defineConstructor(Modifier.PUBLIC).withParameters(paramTypes).intercept(c)
                    .make()
                    .load(CustomResource.class.getClassLoader())
                    .getLoaded().getConstructors()[0]
                    .newInstance(paramValues.toArray());

        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException
                | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(
            @Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
                .version(Utilities.getVersion())
                .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    // /**
    //  * Get an existing Host resource's state with the given name, ID, and optional extra
    //  * properties used to qualify the lookup.
    //  *
    //  * @param name The _unique_ name of the resulting resource.
    //  * @param id The _unique_ provider ID of the resource to lookup.
    //  * @param options Optional settings to control the behavior of the CustomResource.
    //  */
    // public static CustomResource get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
    //     return new CustomResource(name, id, options);
    // }
}
