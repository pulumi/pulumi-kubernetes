// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kustomize

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/yaml"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Directory is a component representing a collection of resources described by a kustomize directory (kustomization).
//
// ## Example Usage
// ### Local Kustomize Directory
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/kustomize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        _, err := kustomize.NewDirectory(ctx, "helloWorldLocal",
//	            kustomize.DirectoryArgs{
//	                Directory: pulumi.String("./helloWorld"),
//	            },
//	        )
//	        if err != nil {
//	            return err
//	        }
//
//	        return nil
//	    })
//	}
//
// ```
// ### Kustomize Directory from a Git Repo
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/kustomize"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        _, err := kustomize.NewDirectory(ctx, "helloWorldRemote",
//	            kustomize.DirectoryArgs{
//	                Directory: pulumi.String("https://github.com/kubernetes-sigs/kustomize/tree/v3.3.1/examples/helloWorld"),
//	            },
//	        )
//	        if err != nil {
//	            return err
//	        }
//
//	        return nil
//	    })
//	}
//
// ```
// ### Kustomize Directory with Transformations
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/kustomize"
//	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/yaml"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//	    pulumi.Run(func(ctx *pulumi.Context) error {
//	        _, err := kustomize.NewDirectory(ctx, "helloWorldRemote",
//	            kustomize.DirectoryArgs{
//	                Directory: pulumi.String("https://github.com/kubernetes-sigs/kustomize/tree/v3.3.1/examples/helloWorld"),
//	                Transformations: []yaml.Transformation{
//	                    // Make every service private to the cluster, i.e., turn all services into ClusterIP
//	                    // instead of LoadBalancer.
//	                    func(state map[string]interface{}, opts ...pulumi.ResourceOption) {
//	                        if state["kind"] == "Service" {
//	                            spec := state["spec"].(map[string]interface{})
//	                            spec["type"] = "ClusterIP"
//	                        }
//	                    },
//
//	                    // Set a resource alias for a previous name.
//	                    func(state map[string]interface{}, opts ...pulumi.ResourceOption) {
//	                        if state["kind"] == "Deployment" {
//	                            aliases := pulumi.Aliases([]pulumi.Alias{
//	                                {
//	                                    Name: pulumi.String("oldName"),
//	                                },
//	                            })
//	                            opts = append(opts, aliases)
//	                        }
//	                    },
//
//	                    // Omit a resource from the Chart by transforming the specified resource definition
//	                    // to an empty List.
//	                    func(state map[string]interface{}, opts ...pulumi.ResourceOption) {
//	                        name := state["metadata"].(map[string]interface{})["name"]
//	                        if state["kind"] == "Pod" && name == "test" {
//	                            state["apiVersion"] = "core/v1"
//	                            state["kind"] = "List"
//	                        }
//	                    },
//	                },
//	            },
//	        )
//	        if err != nil {
//	            return err
//	        }
//
//	        return nil
//	    })
//	}
//
// ```
type Directory struct {
	pulumi.ResourceState

	Resources pulumi.Output
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {

	// Register the resulting resource state.
	chart := &Directory{}
	err := ctx.RegisterComponentResource("kubernetes:kustomize:Directory", name, chart, opts...)
	if err != nil {
		return nil, err
	}

	parseOpts, err := yaml.GetChildOptions(chart, opts)
	if err != nil {
		return nil, err
	}
	resources := args.ToDirectoryArgsOutput().ApplyT(func(args directoryArgs) (map[string]pulumi.Resource, error) {
		return parseDirectory(ctx, args, parseOpts...)
	})
	chart.Resources = resources

	// Finally, register all of the resources found.
	// Note: Go requires that we "pull" on our futures in order to get them scheduled for execution. Here, we use
	// the engine's RegisterResourceOutputs to wait for the resolution of all resources that this Helm chart created.
	err = ctx.RegisterResourceOutputs(chart, pulumi.Map{"resources": resources})
	if err != nil {
		return nil, errors.Wrap(err, "registering child resources")
	}

	return chart, nil
}

func parseDirectory(ctx *pulumi.Context, args directoryArgs, opts ...pulumi.ResourceOption,
) (map[string]pulumi.Resource, error) {
	invokeArgs := struct {
		Directory string `pulumi:"directory"`
	}{Directory: args.Directory}
	var ret struct {
		Result []map[string]interface{} `pulumi:"result"`
	}

	invokeOpts, err := yaml.GetInvokeOptions(opts)
	if err != nil {
		return nil, err
	}
	if err := ctx.Invoke("kubernetes:kustomize:directory", &invokeArgs, &ret, invokeOpts...); err != nil {
		return nil, errors.Wrap(err, "kustomize invoke failed")
	}

	resources, err := yaml.ParseYamlObjects(ctx, ret.Result, args.Transformations, args.ResourcePrefix, opts...)
	if err != nil {
		return nil, err
	}
	return resources, nil
}
