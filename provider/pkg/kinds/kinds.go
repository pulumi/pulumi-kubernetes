// Copyright 2016-2021, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kinds

import (
	"strings"

	"github.com/pulumi/pulumi/pkg/v3/codegen"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// Kind maps to the name of a Kubernetes resource Kind.
type Kind string

const (
	APIService                           Kind = "APIService"
	APIServiceList                       Kind = "APIServiceList"
	AuditSink                            Kind = "AuditSink"
	AuditSinkList                        Kind = "AuditSinkList"
	Binding                              Kind = "Binding"
	CSIDriver                            Kind = "CSIDriver"
	CSIDriverList                        Kind = "CSIDriverList"
	CSINode                              Kind = "CSINode"
	CSINodeList                          Kind = "CSINodeList"
	CSIStorageCapacity                   Kind = "CSIStorageCapacity"
	CSIStorageCapacityList               Kind = "CSIStorageCapacityList"
	CertificateSigningRequest            Kind = "CertificateSigningRequest"
	CertificateSigningRequestList        Kind = "CertificateSigningRequestList"
	ClusterCIDR                          Kind = "ClusterCIDR"
	ClusterCIDRList                      Kind = "ClusterCIDRList"
	ClusterRole                          Kind = "ClusterRole"
	ClusterRoleBinding                   Kind = "ClusterRoleBinding"
	ClusterRoleBindingList               Kind = "ClusterRoleBindingList"
	ClusterRoleList                      Kind = "ClusterRoleList"
	ClusterTrustBundle                   Kind = "ClusterTrustBundle"
	ClusterTrustBundleList               Kind = "ClusterTrustBundleList"
	ConfigMap                            Kind = "ConfigMap"
	ConfigMapList                        Kind = "ConfigMapList"
	ControllerRevision                   Kind = "ControllerRevision"
	ControllerRevisionList               Kind = "ControllerRevisionList"
	CronJob                              Kind = "CronJob"
	CronJobList                          Kind = "CronJobList"
	CustomResourceDefinition             Kind = "CustomResourceDefinition"
	CustomResourceDefinitionList         Kind = "CustomResourceDefinitionList"
	DaemonSet                            Kind = "DaemonSet"
	DaemonSetList                        Kind = "DaemonSetList"
	Deployment                           Kind = "Deployment"
	DeploymentList                       Kind = "DeploymentList"
	EndpointSlice                        Kind = "EndpointSlice"
	EndpointSliceList                    Kind = "EndpointSliceList"
	Endpoints                            Kind = "Endpoints"
	EndpointsList                        Kind = "EndpointsList"
	Event                                Kind = "Event"
	EventList                            Kind = "EventList"
	FlowSchema                           Kind = "FlowSchema"
	FlowSchemaList                       Kind = "FlowSchemaList"
	HorizontalPodAutoscaler              Kind = "HorizontalPodAutoscaler"
	HorizontalPodAutoscalerList          Kind = "HorizontalPodAutoscalerList"
	IPAddress                            Kind = "IPAddress"
	IPAddressList                        Kind = "IPAddressList"
	Ingress                              Kind = "Ingress"
	IngressClass                         Kind = "IngressClass"
	IngressClassList                     Kind = "IngressClassList"
	IngressList                          Kind = "IngressList"
	Job                                  Kind = "Job"
	JobList                              Kind = "JobList"
	Lease                                Kind = "Lease"
	LeaseList                            Kind = "LeaseList"
	LimitRange                           Kind = "LimitRange"
	LimitRangeList                       Kind = "LimitRangeList"
	MutatingWebhookConfiguration         Kind = "MutatingWebhookConfiguration"
	MutatingWebhookConfigurationList     Kind = "MutatingWebhookConfigurationList"
	Namespace                            Kind = "Namespace"
	NamespaceList                        Kind = "NamespaceList"
	NetworkPolicy                        Kind = "NetworkPolicy"
	NetworkPolicyList                    Kind = "NetworkPolicyList"
	Node                                 Kind = "Node"
	NodeList                             Kind = "NodeList"
	PersistentVolume                     Kind = "PersistentVolume"
	PersistentVolumeClaim                Kind = "PersistentVolumeClaim"
	PersistentVolumeClaimList            Kind = "PersistentVolumeClaimList"
	PersistentVolumeList                 Kind = "PersistentVolumeList"
	Pod                                  Kind = "Pod"
	PodDisruptionBudget                  Kind = "PodDisruptionBudget"
	PodDisruptionBudgetList              Kind = "PodDisruptionBudgetList"
	PodList                              Kind = "PodList"
	PodPreset                            Kind = "PodPreset"
	PodPresetList                        Kind = "PodPresetList"
	PodScheduling                        Kind = "PodScheduling"
	PodSchedulingContext                 Kind = "PodSchedulingContext"
	PodSchedulingContextList             Kind = "PodSchedulingContextList"
	PodSchedulingList                    Kind = "PodSchedulingList"
	PodSecurityPolicy                    Kind = "PodSecurityPolicy"
	PodSecurityPolicyList                Kind = "PodSecurityPolicyList"
	PodTemplate                          Kind = "PodTemplate"
	PodTemplateList                      Kind = "PodTemplateList"
	PriorityClass                        Kind = "PriorityClass"
	PriorityClassList                    Kind = "PriorityClassList"
	PriorityLevelConfiguration           Kind = "PriorityLevelConfiguration"
	PriorityLevelConfigurationList       Kind = "PriorityLevelConfigurationList"
	ReplicaSet                           Kind = "ReplicaSet"
	ReplicaSetList                       Kind = "ReplicaSetList"
	ReplicationController                Kind = "ReplicationController"
	ReplicationControllerList            Kind = "ReplicationControllerList"
	ResourceClaim                        Kind = "ResourceClaim"
	ResourceClaimList                    Kind = "ResourceClaimList"
	ResourceClaimTemplate                Kind = "ResourceClaimTemplate"
	ResourceClaimTemplateList            Kind = "ResourceClaimTemplateList"
	ResourceClass                        Kind = "ResourceClass"
	ResourceClassList                    Kind = "ResourceClassList"
	ResourceQuota                        Kind = "ResourceQuota"
	ResourceQuotaList                    Kind = "ResourceQuotaList"
	Role                                 Kind = "Role"
	RoleBinding                          Kind = "RoleBinding"
	RoleBindingList                      Kind = "RoleBindingList"
	RoleList                             Kind = "RoleList"
	RuntimeClass                         Kind = "RuntimeClass"
	RuntimeClassList                     Kind = "RuntimeClassList"
	Secret                               Kind = "Secret"
	SecretList                           Kind = "SecretList"
	Service                              Kind = "Service"
	ServiceAccount                       Kind = "ServiceAccount"
	ServiceAccountList                   Kind = "ServiceAccountList"
	ServiceCIDR                          Kind = "ServiceCIDR"
	ServiceCIDRList                      Kind = "ServiceCIDRList"
	ServiceList                          Kind = "ServiceList"
	StatefulSet                          Kind = "StatefulSet"
	StatefulSetList                      Kind = "StatefulSetList"
	Status                               Kind = "Status"
	StorageClass                         Kind = "StorageClass"
	StorageClassList                     Kind = "StorageClassList"
	ValidatingAdmissionPolicy            Kind = "ValidatingAdmissionPolicy"
	ValidatingAdmissionPolicyBinding     Kind = "ValidatingAdmissionPolicyBinding"
	ValidatingAdmissionPolicyBindingList Kind = "ValidatingAdmissionPolicyBindingList"
	ValidatingAdmissionPolicyList        Kind = "ValidatingAdmissionPolicyList"
	ValidatingWebhookConfiguration       Kind = "ValidatingWebhookConfiguration"
	ValidatingWebhookConfigurationList   Kind = "ValidatingWebhookConfigurationList"
	VolumeAttachment                     Kind = "VolumeAttachment"
	VolumeAttachmentList                 Kind = "VolumeAttachmentList"
	VolumeAttributesClass                Kind = "VolumeAttributesClass"
	VolumeAttributesClassList            Kind = "VolumeAttributesClassList"
)

// Namespaced returns whether known resource Kinds are namespaced. If the Kind is unknown (such as CRD Kinds), the
// known return value will be false, and the namespaced value is unknown. In this case, this information can be
// queried separately from the k8s API server.
func (k Kind) Namespaced() (known bool, namespaced bool) {
	baseKind := Kind(strings.TrimSuffix(string(k), "List"))

	switch baseKind {
	// Note: Use `kubectl api-resources --namespaced=true -o name` to retrieve a list of namespace-scoped resources.
	//       Ignoring the same imperative endpoints as in `pkg/gen/typegen.go:isTopLevel`
	case Binding,
		ConfigMap,
		ControllerRevision,
		CronJob,
		CSIStorageCapacity,
		DaemonSet,
		Deployment,
		Endpoints,
		EndpointSlice,
		Event,
		HorizontalPodAutoscaler,
		Ingress,
		Job,
		Lease,
		LimitRange,
		NetworkPolicy,
		PersistentVolumeClaim,
		Pod,
		PodDisruptionBudget,
		PodTemplate,
		ReplicaSet,
		ReplicationController,
		ResourceQuota,
		Role,
		RoleBinding,
		Secret,
		Service,
		ServiceAccount,
		StatefulSet:
		return true, true
	// Note: Use `kubectl api-resources --namespaced=false -o name` to retrieve a list of cluster-scoped resources.
	//       Ignoring the same imperative endpoints as in `pkg/gen/typegen.go:isTopLevel`
	case APIService,
		CertificateSigningRequest,
		ClusterRole,
		ClusterRoleBinding,
		CSIDriver,
		CSINode,
		CustomResourceDefinition,
		FlowSchema,
		IngressClass,
		MutatingWebhookConfiguration,
		Namespace,
		Node,
		PersistentVolume,
		PodSecurityPolicy,
		PriorityClass,
		PriorityLevelConfiguration,
		RuntimeClass,
		StorageClass,
		ValidatingWebhookConfiguration,
		VolumeAttachment:
		return true, false
	default:
		return false, false
	}
}

// groupVersion maps to the name of a Kubernetes resource GroupVersion.
type groupVersion string

const (
	AdmissionregistrationV1   groupVersion = "admissionregistration.k8s.io/v1"
	AdmissionregistrationV1A1 groupVersion = "admissionregistration.k8s.io/v1alpha1"
	AdmissionregistrationV1B1 groupVersion = "admissionregistration.k8s.io/v1beta1"
	ApiextensionsV1           groupVersion = "apiextensions.k8s.io/v1"
	ApiextensionsV1B1         groupVersion = "apiextensions.k8s.io/v1beta1"
	ApiregistrationV1         groupVersion = "apiregistration.k8s.io/v1"
	ApiregistrationV1B1       groupVersion = "apiregistration.k8s.io/v1beta1"
	AppsV1                    groupVersion = "apps/v1"
	AppsV1B1                  groupVersion = "apps/v1beta1"
	AppsV1B2                  groupVersion = "apps/v1beta2"
	AuditregistrationV1A1     groupVersion = "auditregistration.k8s.io/v1alpha1"
	AutoscalingV1             groupVersion = "autoscaling/v1"
	AutoscalingV2             groupVersion = "autoscaling/v2"
	AutoscalingV2B1           groupVersion = "autoscaling/v2beta1"
	AutoscalingV2B2           groupVersion = "autoscaling/v2beta2"
	BatchV1                   groupVersion = "batch/v1"
	BatchV1B1                 groupVersion = "batch/v1beta1"
	BatchV2A1                 groupVersion = "batch/v2alpha1"
	CertificatesV1            groupVersion = "certificates.k8s.io/v1"
	CertificatesV1A1          groupVersion = "certificates.k8s.io/v1alpha1"
	CertificatesV1B1          groupVersion = "certificates.k8s.io/v1beta1"
	CoordinationV1            groupVersion = "coordination.k8s.io/v1"
	CoordinationV1B1          groupVersion = "coordination.k8s.io/v1beta1"
	CoreV1                    groupVersion = "core/v1"
	DiscoveryV1               groupVersion = "discovery.k8s.io/v1"
	DiscoveryV1B1             groupVersion = "discovery.k8s.io/v1beta1"
	EventsV1                  groupVersion = "events.k8s.io/v1"
	EventsV1B1                groupVersion = "events.k8s.io/v1beta1"
	ExtensionsV1B1            groupVersion = "extensions/v1beta1"
	FlowcontrolV1             groupVersion = "flowcontrol.apiserver.k8s.io/v1"
	FlowcontrolV1A1           groupVersion = "flowcontrol.apiserver.k8s.io/v1alpha1"
	FlowcontrolV1B1           groupVersion = "flowcontrol.apiserver.k8s.io/v1beta1"
	FlowcontrolV1B2           groupVersion = "flowcontrol.apiserver.k8s.io/v1beta2"
	FlowcontrolV1B3           groupVersion = "flowcontrol.apiserver.k8s.io/v1beta3"
	MetaV1                    groupVersion = "meta/v1"
	NetworkingV1              groupVersion = "networking.k8s.io/v1"
	NetworkingV1A1            groupVersion = "networking.k8s.io/v1alpha1"
	NetworkingV1B1            groupVersion = "networking.k8s.io/v1beta1"
	NodeV1                    groupVersion = "node.k8s.io/v1"
	NodeV1A1                  groupVersion = "node.k8s.io/v1alpha1"
	NodeV1B1                  groupVersion = "node.k8s.io/v1beta1"
	PolicyV1                  groupVersion = "policy/v1"
	PolicyV1B1                groupVersion = "policy/v1beta1"
	RbacV1                    groupVersion = "rbac.authorization.k8s.io/v1"
	RbacV1A1                  groupVersion = "rbac.authorization.k8s.io/v1alpha1"
	RbacV1B1                  groupVersion = "rbac.authorization.k8s.io/v1beta1"
	ResourceV1A1              groupVersion = "resource.k8s.io/v1alpha1"
	ResourceV1A2              groupVersion = "resource.k8s.io/v1alpha2"
	SchedulingV1              groupVersion = "scheduling.k8s.io/v1"
	SchedulingV1A1            groupVersion = "scheduling.k8s.io/v1alpha1"
	SchedulingV1B1            groupVersion = "scheduling.k8s.io/v1beta1"
	SettingsV1A1              groupVersion = "settings.k8s.io/v1alpha1"
	StorageV1                 groupVersion = "storage.k8s.io/v1"
	StorageV1A1               groupVersion = "storage.k8s.io/v1alpha1"
	StorageV1B1               groupVersion = "storage.k8s.io/v1beta1"
)

// toGVK is a helper function that converts the internal groupVersion and Kind types to a schema.GroupVersionKind
func toGVK(gv groupVersion, kind Kind) schema.GroupVersionKind {
	parts := strings.Split(string(gv), "/")
	g, v := parts[0], parts[1]

	return schema.GroupVersionKind{
		Group:   g,
		Version: v,
		Kind:    string(kind),
	}
}

// KnownGroupVersions is the set of built-in GroupVersions / ApiVersions. GVs defined by a CRD are not part of this set.
var KnownGroupVersions = codegen.NewStringSet(
	"admissionregistration.k8s.io/v1",
	"admissionregistration.k8s.io/v1alpha1",
	"admissionregistration.k8s.io/v1beta1",
	"apiextensions.k8s.io/v1",
	"apiextensions.k8s.io/v1beta1",
	"apiregistration.k8s.io/v1",
	"apiregistration.k8s.io/v1beta1",
	"apps/v1",
	"apps/v1beta1",
	"apps/v1beta2",
	"auditregistration.k8s.io/v1alpha1",
	"autoscaling/v1",
	"autoscaling/v2",
	"autoscaling/v2beta1",
	"autoscaling/v2beta2",
	"batch/v1",
	"batch/v1beta1",
	"batch/v2alpha1",
	"certificates.k8s.io/v1",
	"certificates.k8s.io/v1alpha1",
	"certificates.k8s.io/v1beta1",
	"coordination.k8s.io/v1",
	"coordination.k8s.io/v1beta1",
	"core/v1",
	"discovery.k8s.io/v1",
	"discovery.k8s.io/v1beta1",
	"events.k8s.io/v1",
	"events.k8s.io/v1beta1",
	"extensions/v1beta1",
	"flowcontrol.apiserver.k8s.io/v1",
	"flowcontrol.apiserver.k8s.io/v1alpha1",
	"flowcontrol.apiserver.k8s.io/v1beta1",
	"flowcontrol.apiserver.k8s.io/v1beta2",
	"flowcontrol.apiserver.k8s.io/v1beta3",
	"meta/v1",
	"networking.k8s.io/v1",
	"networking.k8s.io/v1alpha1",
	"networking.k8s.io/v1beta1",
	"node.k8s.io/v1",
	"node.k8s.io/v1alpha1",
	"node.k8s.io/v1beta1",
	"policy/v1",
	"policy/v1beta1",
	"rbac.authorization.k8s.io/v1",
	"rbac.authorization.k8s.io/v1alpha1",
	"rbac.authorization.k8s.io/v1beta1",
	"resource.k8s.io/v1alpha1",
	"resource.k8s.io/v1alpha2",
	"scheduling.k8s.io/v1",
	"scheduling.k8s.io/v1alpha1",
	"scheduling.k8s.io/v1beta1",
	"settings.k8s.io/v1alpha1",
	"storage.k8s.io/v1",
	"storage.k8s.io/v1alpha1",
	"storage.k8s.io/v1beta1",
	"v1", // alias for "core/v1"
)

// PatchQualifiedTypes is the set of "Patch" resource QualifiedType URN tokens. Checking against this known set rather
// than using the Patch suffix avoids unintended clashes with CustomResources that also contain a Patch suffix.
var PatchQualifiedTypes = codegen.NewStringSet(
	"kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfigurationPatch",
	"kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfigurationPatch",
	"kubernetes:admissionregistration.k8s.io/v1alpha1:ValidatingAdmissionPolicyBindingPatch",
	"kubernetes:admissionregistration.k8s.io/v1alpha1:ValidatingAdmissionPolicyPatch",
	"kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfigurationPatch",
	"kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingAdmissionPolicyBindingPatch",
	"kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingAdmissionPolicyPatch",
	"kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfigurationPatch",
	"kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinitionPatch",
	"kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinitionPatch",
	"kubernetes:apiregistration.k8s.io/v1:APIServicePatch",
	"kubernetes:apiregistration.k8s.io/v1beta1:APIServicePatch",
	"kubernetes:apps/v1:ControllerRevisionPatch",
	"kubernetes:apps/v1:DaemonSetPatch",
	"kubernetes:apps/v1:DeploymentPatch",
	"kubernetes:apps/v1:ReplicaSetPatch",
	"kubernetes:apps/v1:StatefulSetPatch",
	"kubernetes:apps/v1beta1:ControllerRevisionPatch",
	"kubernetes:apps/v1beta1:DeploymentPatch",
	"kubernetes:apps/v1beta1:StatefulSetPatch",
	"kubernetes:apps/v1beta2:ControllerRevisionPatch",
	"kubernetes:apps/v1beta2:DaemonSetPatch",
	"kubernetes:apps/v1beta2:DeploymentPatch",
	"kubernetes:apps/v1beta2:ReplicaSetPatch",
	"kubernetes:apps/v1beta2:StatefulSetPatch",
	"kubernetes:auditregistration.k8s.io/v1alpha1:AuditSinkPatch",
	"kubernetes:autoscaling/v1:HorizontalPodAutoscalerPatch",
	"kubernetes:autoscaling/v2:HorizontalPodAutoscalerPatch",
	"kubernetes:autoscaling/v2beta1:HorizontalPodAutoscalerPatch",
	"kubernetes:autoscaling/v2beta2:HorizontalPodAutoscalerPatch",
	"kubernetes:batch/v1:CronJobPatch",
	"kubernetes:batch/v1:JobPatch",
	"kubernetes:batch/v1beta1:CronJobPatch",
	"kubernetes:batch/v2alpha1:CronJobPatch",
	"kubernetes:certificates.k8s.io/v1:CertificateSigningRequestPatch",
	"kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundlePatch",
	"kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequestPatch",
	"kubernetes:coordination.k8s.io/v1:LeasePatch",
	"kubernetes:coordination.k8s.io/v1beta1:LeasePatch",
	"kubernetes:core/v1:BindingPatch",
	"kubernetes:core/v1:ConfigMapPatch",
	"kubernetes:core/v1:EndpointsPatch",
	"kubernetes:core/v1:EventPatch",
	"kubernetes:core/v1:LimitRangePatch",
	"kubernetes:core/v1:NamespacePatch",
	"kubernetes:core/v1:NodePatch",
	"kubernetes:core/v1:PersistentVolumeClaimPatch",
	"kubernetes:core/v1:PersistentVolumePatch",
	"kubernetes:core/v1:PodPatch",
	"kubernetes:core/v1:PodTemplatePatch",
	"kubernetes:core/v1:ReplicationControllerPatch",
	"kubernetes:core/v1:ResourceQuotaPatch",
	"kubernetes:core/v1:SecretPatch",
	"kubernetes:core/v1:ServiceAccountPatch",
	"kubernetes:core/v1:ServicePatch",
	"kubernetes:discovery.k8s.io/v1:EndpointSlicePatch",
	"kubernetes:discovery.k8s.io/v1beta1:EndpointSlicePatch",
	"kubernetes:events.k8s.io/v1:EventPatch",
	"kubernetes:events.k8s.io/v1beta1:EventPatch",
	"kubernetes:extensions/v1beta1:DaemonSetPatch",
	"kubernetes:extensions/v1beta1:DeploymentPatch",
	"kubernetes:extensions/v1beta1:IngressPatch",
	"kubernetes:extensions/v1beta1:NetworkPolicyPatch",
	"kubernetes:extensions/v1beta1:PodSecurityPolicyPatch",
	"kubernetes:extensions/v1beta1:ReplicaSetPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1:FlowSchemaPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1:PriorityLevelConfigurationPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1alpha1:FlowSchemaPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1alpha1:PriorityLevelConfigurationPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta1:FlowSchemaPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta1:PriorityLevelConfigurationPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta2:FlowSchemaPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta2:PriorityLevelConfigurationPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta3:FlowSchemaPatch",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta3:PriorityLevelConfigurationPatch",
	"kubernetes:meta/v1:StatusPatch",
	"kubernetes:networking.k8s.io/v1:IngressClassPatch",
	"kubernetes:networking.k8s.io/v1:IngressPatch",
	"kubernetes:networking.k8s.io/v1:NetworkPolicyPatch",
	"kubernetes:networking.k8s.io/v1alpha1:ClusterCIDRPatch",
	"kubernetes:networking.k8s.io/v1alpha1:IPAddressPatch",
	"kubernetes:networking.k8s.io/v1alpha1:ServiceCIDRPatch",
	"kubernetes:networking.k8s.io/v1beta1:IngressClassPatch",
	"kubernetes:networking.k8s.io/v1beta1:IngressPatch",
	"kubernetes:node.k8s.io/v1:RuntimeClassPatch",
	"kubernetes:node.k8s.io/v1alpha1:RuntimeClassPatch",
	"kubernetes:node.k8s.io/v1beta1:RuntimeClassPatch",
	"kubernetes:policy/v1:PodDisruptionBudgetPatch",
	"kubernetes:policy/v1beta1:PodDisruptionBudgetPatch",
	"kubernetes:policy/v1beta1:PodSecurityPolicyPatch",
	"kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBindingPatch",
	"kubernetes:rbac.authorization.k8s.io/v1:ClusterRolePatch",
	"kubernetes:rbac.authorization.k8s.io/v1:RoleBindingPatch",
	"kubernetes:rbac.authorization.k8s.io/v1:RolePatch",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBindingPatch",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRolePatch",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBindingPatch",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:RolePatch",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBindingPatch",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRolePatch",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBindingPatch",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:RolePatch",
	"kubernetes:resource.k8s.io/v1alpha1:PodSchedulingPatch",
	"kubernetes:resource.k8s.io/v1alpha1:ResourceClaimPatch",
	"kubernetes:resource.k8s.io/v1alpha1:ResourceClaimTemplatePatch",
	"kubernetes:resource.k8s.io/v1alpha1:ResourceClassPatch",
	"kubernetes:resource.k8s.io/v1alpha2:PodSchedulingContextPatch",
	"kubernetes:resource.k8s.io/v1alpha2:ResourceClaimPatch",
	"kubernetes:resource.k8s.io/v1alpha2:ResourceClaimTemplatePatch",
	"kubernetes:resource.k8s.io/v1alpha2:ResourceClassPatch",
	"kubernetes:scheduling.k8s.io/v1:PriorityClassPatch",
	"kubernetes:scheduling.k8s.io/v1alpha1:PriorityClassPatch",
	"kubernetes:scheduling.k8s.io/v1beta1:PriorityClassPatch",
	"kubernetes:settings.k8s.io/v1alpha1:PodPresetPatch",
	"kubernetes:storage.k8s.io/v1:CSIDriverPatch",
	"kubernetes:storage.k8s.io/v1:CSINodePatch",
	"kubernetes:storage.k8s.io/v1:CSIStorageCapacityPatch",
	"kubernetes:storage.k8s.io/v1:StorageClassPatch",
	"kubernetes:storage.k8s.io/v1:VolumeAttachmentPatch",
	"kubernetes:storage.k8s.io/v1alpha1:VolumeAttachmentPatch",
	"kubernetes:storage.k8s.io/v1alpha1:VolumeAttributesClassPatch",
	"kubernetes:storage.k8s.io/v1beta1:CSIDriverPatch",
	"kubernetes:storage.k8s.io/v1beta1:CSINodePatch",
	"kubernetes:storage.k8s.io/v1beta1:CSIStorageCapacityPatch",
	"kubernetes:storage.k8s.io/v1beta1:StorageClassPatch",
	"kubernetes:storage.k8s.io/v1beta1:VolumeAttachmentPatch",
)

// ListQualifiedTypes is the set of "List" resource QualifiedType URN tokens. Checking against this known set rather
// than using the List suffix avoids unintended clashes with CustomResources that also contain a List suffix.
var ListQualifiedTypes = codegen.NewStringSet(
	"kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfigurationList",
	"kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfigurationList",
	"kubernetes:admissionregistration.k8s.io/v1alpha1:ValidatingAdmissionPolicyBindingList",
	"kubernetes:admissionregistration.k8s.io/v1alpha1:ValidatingAdmissionPolicyList",
	"kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfigurationList",
	"kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingAdmissionPolicyBindingList",
	"kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingAdmissionPolicyList",
	"kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfigurationList",
	"kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinitionList",
	"kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinitionList",
	"kubernetes:apiregistration.k8s.io/v1:APIServiceList",
	"kubernetes:apiregistration.k8s.io/v1beta1:APIServiceList",
	"kubernetes:apps/v1:ControllerRevisionList",
	"kubernetes:apps/v1:DaemonSetList",
	"kubernetes:apps/v1:DeploymentList",
	"kubernetes:apps/v1:ReplicaSetList",
	"kubernetes:apps/v1:StatefulSetList",
	"kubernetes:apps/v1beta1:ControllerRevisionList",
	"kubernetes:apps/v1beta1:DeploymentList",
	"kubernetes:apps/v1beta1:StatefulSetList",
	"kubernetes:apps/v1beta2:ControllerRevisionList",
	"kubernetes:apps/v1beta2:DaemonSetList",
	"kubernetes:apps/v1beta2:DeploymentList",
	"kubernetes:apps/v1beta2:ReplicaSetList",
	"kubernetes:apps/v1beta2:StatefulSetList",
	"kubernetes:auditregistration.k8s.io/v1alpha1:AuditSinkList",
	"kubernetes:autoscaling/v1:HorizontalPodAutoscalerList",
	"kubernetes:autoscaling/v2:HorizontalPodAutoscalerList",
	"kubernetes:autoscaling/v2beta1:HorizontalPodAutoscalerList",
	"kubernetes:autoscaling/v2beta2:HorizontalPodAutoscalerList",
	"kubernetes:batch/v1:CronJobList",
	"kubernetes:batch/v1:JobList",
	"kubernetes:batch/v1beta1:CronJobList",
	"kubernetes:batch/v2alpha1:CronJobList",
	"kubernetes:certificates.k8s.io/v1:CertificateSigningRequestList",
	"kubernetes:certificates.k8s.io/v1alpha1:ClusterTrustBundleList",
	"kubernetes:certificates.k8s.io/v1beta1:CertificateSigningRequestList",
	"kubernetes:coordination.k8s.io/v1:LeaseList",
	"kubernetes:coordination.k8s.io/v1beta1:LeaseList",
	"kubernetes:core/v1:ConfigMapList",
	"kubernetes:core/v1:EndpointsList",
	"kubernetes:core/v1:EventList",
	"kubernetes:core/v1:LimitRangeList",
	"kubernetes:core/v1:NamespaceList",
	"kubernetes:core/v1:NodeList",
	"kubernetes:core/v1:PersistentVolumeClaimList",
	"kubernetes:core/v1:PersistentVolumeList",
	"kubernetes:core/v1:PodList",
	"kubernetes:core/v1:PodTemplateList",
	"kubernetes:core/v1:ReplicationControllerList",
	"kubernetes:core/v1:ResourceQuotaList",
	"kubernetes:core/v1:SecretList",
	"kubernetes:core/v1:ServiceAccountList",
	"kubernetes:core/v1:ServiceList",
	"kubernetes:discovery.k8s.io/v1:EndpointSliceList",
	"kubernetes:discovery.k8s.io/v1beta1:EndpointSliceList",
	"kubernetes:events.k8s.io/v1:EventList",
	"kubernetes:events.k8s.io/v1beta1:EventList",
	"kubernetes:extensions/v1beta1:DaemonSetList",
	"kubernetes:extensions/v1beta1:DeploymentList",
	"kubernetes:extensions/v1beta1:IngressList",
	"kubernetes:extensions/v1beta1:NetworkPolicyList",
	"kubernetes:extensions/v1beta1:PodSecurityPolicyList",
	"kubernetes:extensions/v1beta1:ReplicaSetList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1:FlowSchemaList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1:PriorityLevelConfigurationList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1alpha1:FlowSchemaList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1alpha1:PriorityLevelConfigurationList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta1:FlowSchemaList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta1:PriorityLevelConfigurationList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta2:FlowSchemaList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta2:PriorityLevelConfigurationList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta3:FlowSchemaList",
	"kubernetes:flowcontrol.apiserver.k8s.io/v1beta3:PriorityLevelConfigurationList",
	"kubernetes:networking.k8s.io/v1:IngressClassList",
	"kubernetes:networking.k8s.io/v1:IngressList",
	"kubernetes:networking.k8s.io/v1:NetworkPolicyList",
	"kubernetes:networking.k8s.io/v1alpha1:ClusterCIDRList",
	"kubernetes:networking.k8s.io/v1alpha1:IPAddressList",
	"kubernetes:networking.k8s.io/v1alpha1:ServiceCIDRList",
	"kubernetes:networking.k8s.io/v1beta1:IngressClassList",
	"kubernetes:networking.k8s.io/v1beta1:IngressList",
	"kubernetes:node.k8s.io/v1:RuntimeClassList",
	"kubernetes:node.k8s.io/v1alpha1:RuntimeClassList",
	"kubernetes:node.k8s.io/v1beta1:RuntimeClassList",
	"kubernetes:policy/v1:PodDisruptionBudgetList",
	"kubernetes:policy/v1beta1:PodDisruptionBudgetList",
	"kubernetes:policy/v1beta1:PodSecurityPolicyList",
	"kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBindingList",
	"kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleList",
	"kubernetes:rbac.authorization.k8s.io/v1:RoleBindingList",
	"kubernetes:rbac.authorization.k8s.io/v1:RoleList",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBindingList",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleList",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBindingList",
	"kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleList",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBindingList",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleList",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBindingList",
	"kubernetes:rbac.authorization.k8s.io/v1beta1:RoleList",
	"kubernetes:resource.k8s.io/v1alpha1:PodSchedulingList",
	"kubernetes:resource.k8s.io/v1alpha1:ResourceClaimList",
	"kubernetes:resource.k8s.io/v1alpha1:ResourceClaimTemplateList",
	"kubernetes:resource.k8s.io/v1alpha1:ResourceClassList",
	"kubernetes:resource.k8s.io/v1alpha2:PodSchedulingContextList",
	"kubernetes:resource.k8s.io/v1alpha2:ResourceClaimList",
	"kubernetes:resource.k8s.io/v1alpha2:ResourceClaimTemplateList",
	"kubernetes:resource.k8s.io/v1alpha2:ResourceClassList",
	"kubernetes:scheduling.k8s.io/v1:PriorityClassList",
	"kubernetes:scheduling.k8s.io/v1alpha1:PriorityClassList",
	"kubernetes:scheduling.k8s.io/v1beta1:PriorityClassList",
	"kubernetes:settings.k8s.io/v1alpha1:PodPresetList",
	"kubernetes:storage.k8s.io/v1:CSIDriverList",
	"kubernetes:storage.k8s.io/v1:CSINodeList",
	"kubernetes:storage.k8s.io/v1:CSIStorageCapacityList",
	"kubernetes:storage.k8s.io/v1:StorageClassList",
	"kubernetes:storage.k8s.io/v1:VolumeAttachmentList",
	"kubernetes:storage.k8s.io/v1alpha1:VolumeAttachmentList",
	"kubernetes:storage.k8s.io/v1alpha1:VolumeAttributesClassList",
	"kubernetes:storage.k8s.io/v1beta1:CSIDriverList",
	"kubernetes:storage.k8s.io/v1beta1:CSINodeList",
	"kubernetes:storage.k8s.io/v1beta1:CSIStorageCapacityList",
	"kubernetes:storage.k8s.io/v1beta1:StorageClassList",
	"kubernetes:storage.k8s.io/v1beta1:VolumeAttachmentList",
)
